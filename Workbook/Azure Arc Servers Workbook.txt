{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "crossComponentResources": [
          "{Subscription}"
        ],
        "parameters": [
          {
            "id": "4bfa37ab-c23f-4bcd-9e9d-a2ef8e5067ff",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": true,
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all"
          },
          {
            "id": "d655fdf4-d08d-470b-bf88-020ceb72f8e3",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceGroup",
            "label": "Resource Group",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n//| project id,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,Manufacturer,Model,AgentVersion\r\n  | distinct resourceGroup",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "cf23522b-92bc-4903-a816-814a8c052fa1",
            "version": "KqlParameterItem/1.0",
            "name": "Domain",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n//| project id,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,Manufacturer,Model,AgentVersion\r\n  | distinct Domain  ",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "c0ee8b32-a7b9-4364-b7b8-705faf566f9c",
            "version": "KqlParameterItem/1.0",
            "name": "OperatingSystem",
            "label": "Operating System",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n//| project id,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,Manufacturer,Model,AgentVersion\r\n  | distinct OS",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "a33bef27-8910-47cb-b900-d0dba711ec2a",
            "version": "KqlParameterItem/1.0",
            "name": "ConnectionStatus",
            "label": "Connection Status",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n//| project id,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,Manufacturer,Model,AgentVersion\r\n  | distinct ConnectionStatus",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": [
              "value::all"
            ]
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "parameters - 1"
    },
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "b6c4388d-3806-423c-aad9-7026099af521",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Overview",
            "subTarget": "Overview",
            "style": "link"
          },
          {
            "id": "5f15687d-5781-4006-bdc7-e1f60ee57b18",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Inventory",
            "subTarget": "Inventory",
            "style": "link"
          },
          {
            "id": "6c32f606-4814-472b-a668-323e6a55110a",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Extensions",
            "subTarget": "Extensions",
            "style": "link"
          },
          {
            "id": "ef1aeccb-7e15-4f1f-99a8-1f2a80c6061b",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Update Management",
            "subTarget": "Updates",
            "style": "link"
          },
          {
            "id": "0e61b2ae-f0ce-4b2d-9129-0e4cf3705739",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Policy Compliance",
            "subTarget": "Policy",
            "style": "link"
          },
          {
            "id": "ffeefd1e-3f6a-4d2b-a292-6b8a1c507307",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Monitoring",
            "subTarget": "Monitoring",
            "style": "link"
          },
          {
            "id": "08dde83c-f732-4e80-a171-9a6f591730eb",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Defender Recommendations",
            "subTarget": "Defender",
            "style": "link"
          },
          {
            "id": "5062ba19-3c5d-45fd-9490-ad30dc67d795",
            "cellValue": "selectedTab",
            "linkTarget": "parameter",
            "linkLabel": "Advisor Recommendations",
            "subTarget": "Advisor",
            "style": "link"
          }
        ]
      },
      "name": "links - 2"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| summarize Count=count() by ConnectionStatus\r\n    ",
              "size": 4,
              "title": "Connection Status",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart"
            },
            "customWidth": "25",
            "name": "query - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| summarize Count=count() by OS\r\n    ",
              "size": 4,
              "title": "Operating System",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart"
            },
            "customWidth": "25",
            "name": "query - 2 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| summarize Count=count() by Domain\r\n    ",
              "size": 4,
              "title": "Domain",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart"
            },
            "customWidth": "25",
            "name": "query - 2 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| summarize Count=count() by resourceGroup\r\n    ",
              "size": 4,
              "title": "Resource Group",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart"
            },
            "customWidth": "25",
            "name": "query - 2 - Copy - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project id,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,Manufacturer,Model,AgentVersion\r\n    ",
              "size": 0,
              "title": "Server Inventory",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "LastStatusChange",
                    "formatter": 6,
                    "dateFormat": {
                      "formatName": "shortDateTimeNoMsPattern"
                    }
                  }
                ],
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "id",
                    "label": "VM Resource"
                  },
                  {
                    "columnId": "Domain",
                    "label": "Domain"
                  },
                  {
                    "columnId": "resourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "ConnectionStatus",
                    "label": "Connection Status"
                  },
                  {
                    "columnId": "OSName",
                    "label": "Operating System"
                  },
                  {
                    "columnId": "Manufacturer",
                    "label": "Manufacturer"
                  },
                  {
                    "columnId": "Model",
                    "label": "Model"
                  },
                  {
                    "columnId": "AgentVersion",
                    "label": "Agent Version"
                  }
                ]
              }
            },
            "name": "query - 0",
            "styleSettings": {
              "showBorder": true
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Inventory"
      },
      "name": "InventoryGroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "# Azure Arc Server Extensions\r\n"
            },
            "conditionalVisibility": {
              "parameterName": "tab",
              "comparison": "isEqualTo",
              "value": "1"
            },
            "name": "text - 0 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project joinid=toupper(id)//,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,Manufacturer,Model,AgentVersion\r\n| join kind=leftouter\r\n(\r\nresources\r\n| where type == \"microsoft.hybridcompute/machines/extensions\"\r\n| extend joinid = toupper(substring(id, 0, indexof(id, '/extensions')))\r\n| project joinid,ExtensionName = name, State = tostring(properties.provisioningState), MachineId = tolower(split(id, \"/extensions/\")[0]), Dummy = 1\r\n) on joinid\r\n| summarize MachineCount = count() by ExtensionName, State, Dummy\r\n| summarize \r\n    Installed = sumif(MachineCount, State in (\"Succeeded\", \"Updating\")),\r\n    Failed = sumif(MachineCount, State == \"Failed\"),\r\n    Dummy=1\r\n    by ExtensionName\r\n    | join kind=leftouter (\r\n    resources\r\n    | where type == \"microsoft.hybridcompute/machines\"\r\n    | summarize TotalMachines = count()\r\n    | project TotalMachines, Dummy = 1\r\n) on Dummy\r\n| project \r\n    ExtensionName,\r\n    Installed = iff(isnull(Installed), 0, Installed),\r\n    Failed = iff(isnull(Failed), 0, Failed),\r\n    TotalMachines = iff(isnull(TotalMachines), 0, TotalMachines),\r\n    TotalNotInstalled = TotalMachines-Installed,\r\n    TotalNotFailed = TotalMachines-Failed\r\n| order by ExtensionName asc",
              "size": 3,
              "title": "Select extension to see details",
              "exportFieldName": "ExtensionName",
              "exportParameterName": "ExtensionName",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Installed",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "[\"Installed\"]/[\"TotalMachines\"]",
                        "columnSettings": [
                          {
                            "columnName": "Installed",
                            "color": "green"
                          },
                          {
                            "columnName": "TotalNotInstalled",
                            "color": "gray"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "columnMatch": "Failed",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "[\"Failed\"]/[\"TotalMachines\"]",
                        "columnSettings": [
                          {
                            "columnName": "Failed",
                            "color": "redBright"
                          },
                          {
                            "columnName": "TotalNotFailed",
                            "color": "gray"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "columnMatch": "TotalMachines",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "TotalNotInstalled",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "TotalNotFailed",
                    "formatter": 5
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "ExtensionName",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "ExtensionName",
                    "label": "Extension"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "ExtensionName",
                  "sortOrder": 1
                }
              ]
            },
            "customWidth": "40",
            "name": "query - 11"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type  == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    JoinID = toupper(id),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| join kind=leftouter(\r\n    resources\r\n| where type == 'microsoft.hybridcompute/machines/extensions'\r\n| where properties.type == ('{ExtensionName}')\r\n| extend\r\n        VMId = toupper(substring(id, 0, indexof(id, '/extensions'))),\r\n        ExtensionName = tostring(properties.type),\r\n        ExtensionVersion = tostring(properties.instanceView.typeHandlerVersion),\r\n\t\tStatus = tostring (properties.provisioningState)\r\n) on $left.JoinID == $right.VMId\r\n| extend ServerName = id\r\n| where ConnectionStatus in ({ConnectionStatus})\r\n| project ServerName, OSName, ConnectionStatus, OS, ExtensionVersion, Status\r\n| where isnotempty(ExtensionVersion) \r\n| summarize count() by ExtensionVersion",
              "size": 4,
              "title": "{ExtensionName} version distribution",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart"
            },
            "customWidth": "25",
            "name": "query - 9"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type  == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    JoinID = toupper(id),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| join kind=leftouter(\r\n    resources\r\n| where type == 'microsoft.hybridcompute/machines/extensions'\r\n| where properties.type == ('{ExtensionName}')\r\n| extend\r\n        VMId = toupper(substring(id, 0, indexof(id, '/extensions'))),\r\n        ExtensionName = tostring(properties.type),\r\n        ExtensionVersion = tostring(properties.instanceView.typeHandlerVersion),\r\n\t\tStatus = tostring (properties.provisioningState)\r\n) on $left.JoinID == $right.VMId\r\n| extend ServerName = id\r\n| where ConnectionStatus in ({ConnectionStatus})\r\n| project ServerName, Domain, resourceGroup,OS, OSName, ConnectionStatus, Status, ExtensionVersion",
              "size": 2,
              "showAnalytics": true,
              "title": "{ExtensionName} extension details",
              "showExportToExcel": true,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "ServerName",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "23.4286ch"
                    }
                  },
                  {
                    "columnMatch": "ConnectionStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Disconnected",
                          "representation": "4",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "Status",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Succeeded",
                          "representation": "success",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "is Empty",
                          "representation": "4",
                          "text": "Not Installed"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Failed",
                          "representation": "4",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "info",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "ExtensionVersion",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "is Empty",
                          "representation": "4",
                          "text": "n/a"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "info",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ],
                "rowLimit": 2000,
                "filter": true,
                "labelSettings": [
                  {
                    "columnId": "ServerName",
                    "label": "Server Name"
                  },
                  {
                    "columnId": "resourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "OS",
                    "label": "OS Type"
                  },
                  {
                    "columnId": "OSName",
                    "label": "OS Name"
                  },
                  {
                    "columnId": "ConnectionStatus",
                    "label": "Connection Status"
                  },
                  {
                    "columnId": "Status",
                    "label": "Extension Status"
                  },
                  {
                    "columnId": "ExtensionVersion",
                    "label": "Extension Version"
                  }
                ]
              },
              "sortBy": []
            },
            "name": "query - 5"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Extensions"
      },
      "name": "ExtensionsGroup",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "//It will join with resources table and patchassessmentresources\r\n((resources //join of virtual machines, you can play with params as you see fit.\r\n| where type =~ \"microsoft.compute/virtualmachines\"\r\n//excluding non-arc servers ///\r\n| where name == \"xxxxxxxxxx\"\r\n//excluding non-arc servers ///\r\n| where properties.storageProfile.osDisk.osType in~ ('Linux','Windows')\r\n| extend conf = iff(properties.storageProfile.osDisk.osType =~ \"windows\", properties.osProfile.windowsConfiguration.patchSettings.patchMode, properties.osProfile.linuxConfiguration.patchSettings.patchMode)\r\n| extend os = tolower(tostring(properties.storageProfile.osDisk.osType))\r\n| extend id=tolower(id)\r\n| extend status=properties.extended.instanceView.powerState.displayStatus\r\n| extend imageRef = strcat(tolower(tostring(properties.storageProfile.imageReference.publisher)), \":\", tolower(tostring(properties.storageProfile.imageReference.offer)), \":\", tolower(tostring(properties.storageProfile.imageReference.sku)))\r\n// For marketplace images, check in the list of allow listed images for guest patching\r\n| extend isMarketplaceUnsupportedImageUsed = (isnotempty(properties.storageProfile.imageReference.publisher) and isnotempty(properties.storageProfile.imageReference.offer) and isnotempty(properties.storageProfile.imageReference.sku)) and\r\n    not(iff(os =~ \"windows\",\r\n        (imageRef in ('microsoftwindowsserver:microsoftserveroperatingsystems-previews:windows-server-vnext-azure-edition-core','microsoftwindowsserver:windowsserver:2008-r2-sp1','microsoftwindowsserver:windowsserver:2012-r2-datacenter','microsoftwindowsserver:windowsserver:2012-r2-datacenter-gensecond','microsoftwindowsserver:windowsserver:2012-r2-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2012-r2-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserver:2016-datacenter','microsoftwindowsserver:windowsserver:2016-datacenter-gensecond','microsoftwindowsserver:windowsserver:2016-datacenter-server-core','microsoftwindowsserver:windowsserver:2016-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2016-datacenter-with-containers','microsoftwindowsserver:windowsserver:2019-datacenter','microsoftwindowsserver:windowsserver:2019-datacenter-core','microsoftwindowsserver:windowsserver:2019-datacenter-gensecond','microsoftwindowsserver:windowsserver:2019-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2019-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserver:2019-datacenter-with-containers','microsoftwindowsserver:windowsserver:2022-datacenter','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-core','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-core-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-hotpatch','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-hotpatch-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-core','microsoftwindowsserver:windowsserver:2022-datacenter-core-g2','microsoftwindowsserver:windowsserver:2022-datacenter-g2','microsoftwindowsserver:windowsserver:2022-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserverhotpatch-previews:windows-server-2022-azure-edition-hotpatch','microsoftwindowsserver:microsoftserveroperatingsystems-previews:windows-server-2025-azure-edition-hotpatch','microsoftazuresiterecovery:process-server:windows-2012-r2-datacenter','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v4','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v5','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v6','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v7','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-u8','microsoftsqlserver:sql2016sp1-ws2016:standard','microsoftsqlserver:sql2016sp2-ws2016:standard','microsoftsqlserver:sql2017-ws2016:enterprise','microsoftsqlserver:sql2017-ws2016:standard','microsoftsqlserver:sql2019-ws2019:enterprise','microsoftsqlserver:sql2019-ws2019:sqldev','microsoftsqlserver:sql2019-ws2019:standard','microsoftsqlserver:sql2019-ws2019:standard-gen2','center-for-internet-security-inc:cis-windows-server-2016-v1-0-0-l1:cis-ws2016-l1','center-for-internet-security-inc:cis-windows-server-2016-v1-0-0-l2:cis-ws2016-l2','center-for-internet-security-inc:cis-windows-server-2019-v1-0-0-l1:cis-ws2019-l1','center-for-internet-security-inc:cis-windows-server-2019-v1-0-0-l2:cis-ws2019-l2','center-for-internet-security-inc:cis-win-2019-stig:cis-win-2019-stig','center-for-internet-security-inc:cis-windows-server:cis-windows-server2019-stig-gen1','center-for-internet-security-inc:cis-windows-server-2012-r2-v2-2-1-l2:cis-ws2012-r2-l2','cloud-infrastructure-services:servercore-2019:servercore-2019','cloud-infrastructure-services:hpc2019-windows-server-2019:hpc2019-windows-server-2019','cognosys:sql-server-2016-sp2-std-win2016-debug-utilities:sql-server-2016-sp2-std-win2016-debug-utilities','cloud-infrastructure-services:ad-dc-2016:ad-dc-2016','cloud-infrastructure-services:ad-dc-2019:ad-dc-2019','cloud-infrastructure-services:ad-dc-2022:ad-dc-2022','cloud-infrastructure-services:sftp-2016:sftp-2016','cloud-infrastructure-services:rds-farm-2019:rds-farm-2019','cloud-infrastructure-services:hmailserver:hmailserver-email-server-2016','veeam:office365backup:veeamoffice365backup') or imageRef matches regex 'microsoftwindowsserver:windowsserver:.*|microsoftbiztalkserver:biztalk-server:.*|microsoftdynamicsax:dynamics:.*|microsoftpowerbi:.*:.*|microsoftsharepoint:microsoftsharepointserver:.*|microsoftsqlserver:.*:.*|microsoftvisualstudio:visualstudio.*:.*-ws2012r2|microsoftvisualstudio:visualstudio.*:.*-ws2016|microsoftvisualstudio:visualstudio.*:.*-ws2019|microsoftvisualstudio:visualstudio.*:.*-ws2022|microsoftwindowsserver:windows-cvm:.*|microsoftwindowsserver:windowsserverdotnet:.*|microsoftwindowsserver:windowsserver-gen2preview:.*|microsoftwindowsserver:windowsserversemiannual:.*|microsoftwindowsserver:windowsserverupgrade:.*|microsoftwindowsserverhpcpack:windowsserverhpcpack:.*|microsoft-dsvm:dsvm-windows:.*|microsoft-dsvm:dsvm-win-2019:.*|microsoft-dsvm:dsvm-win-2022:.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2016-l.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2019-l.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2022-l.*|center-for-internet-security-inc:cis-windows-server-2022-l1:.*|center-for-internet-security-inc:cis-windows-server-2022-l2:.*|microsoft-ads:windows-data-science-vm:.*|filemagellc:filemage-gateway-vm-win:filemage-gateway-vm-win-.*|esri:arcgis-enterprise.*:byol.*|esri:pro-byol:pro-byol-.*|veeam:veeam-backup-replication:veeam-backup-replication-v.*|southrivertech1586314123192:tn-ent-payg:tnentpayg.*|belindaczsro1588885355210:belvmsrv01:belvmsrv.*|southrivertech1586314123192:tn-sftp-payg:tnsftppayg.*'),\r\n        not(imageRef in ('redhat:rhel-ha:81_gen2') or imageRef matches regex 'openlogic:centos:8.*|openlogic:centos-hpc:.*|microsoftsqlserver:sql2019-sles.*:.*|microsoftsqlserver:sql2019-rhel7:.*|microsoftsqlserver:sql2017-rhel7:.*|microsoft-ads:.*:.*|suse:sles-sap-15-.*-byos:gen.*') and\r\n            (imageRef in ('canonical:ubuntuserver:16.04-lts','canonical:ubuntuserver:16.04.0-lts','canonical:ubuntuserver:18.04-lts','canonical:ubuntuserver:18_04-lts-gen2','canonical:0001-com-ubuntu-pro-bionic:pro-18_04-lts','canonical:0001-com-ubuntu-pro-focal:pro-20_04-lts','canonical:0001-com-ubuntu-pro-focal:pro-20_04-lts-gen2','canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts-gen2','canonical:0001-com-ubuntu-server-focal:20_04-lts','canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2','canonical:0001-com-ubuntu-server-jammy:22_04-lts','canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2','microsoftcblmariner:cbl-mariner:cbl-mariner-1','microsoftcblmariner:cbl-mariner:1-gen2','microsoftcblmariner:cbl-mariner:cbl-mariner-2','microsoftcblmariner:cbl-mariner:cbl-mariner-2-gen2','microsoft-aks:aks:aks-engine-ubuntu-1804-202112','microsoft-dsvm:aml-workstation:ubuntu-20','microsoft-dsvm:aml-workstation:ubuntu-20-gen2','openlogic:centos:7.2','openlogic:centos:7.3','openlogic:centos:7.4','openlogic:centos:7.5','openlogic:centos:7.6','openlogic:centos:7.7','openlogic:centos:7_8','openlogic:centos:7_9','openlogic:centos:7_9-gen2','openlogic:centos:8.0','openlogic:centos:8_1','openlogic:centos:8_2','openlogic:centos:8_3','openlogic:centos:8_4','openlogic:centos:8_5','openlogic:centos-lvm:7-lvm','openlogic:centos-lvm:8-lvm','redhat:rhel:7.2','redhat:rhel:7.3','redhat:rhel:7.4','redhat:rhel:7.5','redhat:rhel:7.6','redhat:rhel:7.7','redhat:rhel:7.8','redhat:rhel:7_9','redhat:rhel:7-lvm','redhat:rhel:7-raw','redhat:rhel:8','redhat:rhel:8.1','redhat:rhel:81gen2','redhat:rhel:8.2','redhat:rhel:82gen2','redhat:rhel:8_3','redhat:rhel:83-gen2','redhat:rhel:8_4','redhat:rhel:84-gen2','redhat:rhel:8_5','redhat:rhel:85-gen2','redhat:rhel:8_6','redhat:rhel:86-gen2','redhat:rhel:8_7','redhat:rhel:8_8','redhat:rhel:8-lvm','redhat:rhel:8-lvm-gen2','redhat:rhel-raw:8-raw','redhat:rhel-raw:8-raw-gen2','redhat:rhel:9_0','redhat:rhel:9_1','redhat:rhel:9-lvm','redhat:rhel:9-lvm-gen2','suse:sles-12-sp5:gen1','suse:sles-12-sp5:gen2','suse:sles-15-sp2:gen1','suse:sles-15-sp2:gen2','almalinux:almalinux-x86_64:8_7-gen2','almalinux:almalinux-hpc:8_6-hpc','almalinux:almalinux-hpc:8_6-hpc-gen2','aviatrix-systems:aviatrix-bundle-payg:aviatrix-enterprise-bundle-byol','aviatrix-systems:aviatrix-copilot:avx-cplt-byol-01','aviatrix-systems:aviatrix-copilot:avx-cplt-byol-02','aviatrix-systems:aviatrix-companion-gateway-v9:aviatrix-companion-gateway-v9','aviatrix-systems:aviatrix-companion-gateway-v10:aviatrix-companion-gateway-v10','aviatrix-systems:aviatrix-companion-gateway-v10:aviatrix-companion-gateway-v10u','aviatrix-systems:aviatrix-companion-gateway-v12:aviatrix-companion-gateway-v12','aviatrix-systems:aviatrix-companion-gateway-v13:aviatrix-companion-gateway-v13','aviatrix-systems:aviatrix-companion-gateway-v13:aviatrix-companion-gateway-v13u','aviatrix-systems:aviatrix-companion-gateway-v14:aviatrix-companion-gateway-v14','aviatrix-systems:aviatrix-companion-gateway-v14:aviatrix-companion-gateway-v14u','aviatrix-systems:aviatrix-companion-gateway-v16:aviatrix-companion-gateway-v16','canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts','center-for-internet-security-inc:cis-rhel:cis-redhat7-l1-gen1','center-for-internet-security-inc:cis-rhel-7-l2:cis-rhel7-l2','center-for-internet-security-inc:cis-rhel-8-stig:cis-rhel-8-stig','center-for-internet-security-inc:cis-oracle-linux-8-l1:cis-oracle8-l1','center-for-internet-security-inc:cis-ubuntu:cis-ubuntu1804-l1','center-for-internet-security-inc:cis-ubuntu:cis-ubuntulinux2004-l1-gen1','center-for-internet-security-inc:cis-ubuntu-linux-1804-l1:cis-ubuntu1804-l1','center-for-internet-security-inc:cis-ubuntu-linux-2004-l1:cis-ubuntu2004-l1','center-for-internet-security-inc:cis-ubuntu-linux-2204-l1:cis-ubuntu-linux-2204-l1','center-for-internet-security-inc:cis-ubuntu-linux-2204-l1:cis-ubuntu-linux-2204-l1-gen2','cloud-infrastructure-services:dns-ubuntu-2004:dns-ubuntu-2004','cloud-infrastructure-services:squid-ubuntu-2004:squid-ubuntu-2004','cloud-infrastructure-services:load-balancer-nginx:load-balancer-nginx','cloudera:cloudera-centos-os:7_5','cncf-upstream:capi:ubuntu-1804-gen1','cncf-upstream:capi:ubuntu-2004-gen1','cncf-upstream:capi:ubuntu-2204-gen1','credativ:debian:9','credativ:debian:9-backports','debian:debian-10:10','debian:debian-10:10-gen2','debian:debian-10:10-backports','debian:debian-10:10-backports-gen2','debian:debian-10-daily:10','debian:debian-10-daily:10-gen2','debian:debian-10-daily:10-backports','debian:debian-10-daily:10-backports-gen2','debian:debian-11:11','debian:debian-11:11-gen2','debian:debian-11:11-backports','debian:debian-11:11-backports-gen2','debian:debian-11-daily:11','debian:debian-11-daily:11-gen2','debian:debian-11-daily:11-backports','debian:debian-11-daily:11-backports-gen2','erockyenterprisesoftwarefoundationinc1653071250513:rockylinux:free','erockyenterprisesoftwarefoundationinc1653071250513:rockylinux-9:rockylinux-9','github:github-enterprise:github-enterprise','matillion:matillion:matillion-etl-for-snowflake','microsoft-dsvm:aml-workstation:ubuntu','microsoft-dsvm:ubuntu-hpc:1804','microsoft-dsvm:ubuntu-hpc:2004-preview-ndv5','microsoft-dsvm:ubuntu-hpc:2004','microsoft-dsvm:ubuntu-hpc:2204-preview-ndv5','microsoft-dsvm:ubuntu-hpc:2204','microsoft-dsvm:ubuntu-1804:1804-gen2','microsoft-dsvm:ubuntu-2004:2004','microsoft-dsvm:ubuntu-2004:2004-gen2','netapp:netapp-oncommand-cloud-manager:occm-byol','nginxinc:nginx-plus-ent-v1:nginx-plus-ent-centos7','ntegralinc1586961136942:ntg_oracle_8_7:ntg_oracle_8_7','ntegralinc1586961136942:ntg_ubuntu_20_04_lts:ntg_ubuntu_20_04_lts','openlogic:centos-hpc:7.1','openlogic:centos-hpc:7.3','oracle:oracle-linux:8','oracle:oracle-linux:8-ci','oracle:oracle-linux:81','oracle:oracle-linux:81-ci','oracle:oracle-linux:81-gen2','oracle:oracle-linux:ol82','oracle:oracle-linux:ol8_2-gen2','oracle:oracle-linux:ol82-gen2','oracle:oracle-linux:ol83-lvm','oracle:oracle-linux:ol83-lvm-gen2','oracle:oracle-linux:ol84-lvm','oracle:oracle-linux:ol84-lvm-gen2','procomputers:almalinux-8-7:almalinux-8-7','procomputers:rhel-8-2:rhel-8-2','procomputers:rhel-8-8-gen2:rhel-8-8-gen2','procomputers:rhel-8-9-gen2:rhel-8-9-gen2','redhat:rhel:89-gen2','redhat:rhel-byos:rhel-raw76','redhat:rhel-byos:rhel-lvm88','redhat:rhel-byos:rhel-lvm88-gen2','redhat:rhel-byos:rhel-lvm92','redhat:rhel-byos:rhel-lvm-92-gen2','redhat:rhel-ha:9_2','redhat:rhel-ha:9_2-gen2','redhat:rhel-sap-apps:9_0','redhat:rhel-sap-apps:90sapapps-gen2','redhat:rhel-sap-apps:9_2','redhat:rhel-sap-apps:92sapapps-gen2','redhat:rhel-sap-ha:9_2','redhat:rhel-sap-ha:92sapha-gen2','openlogic:centos-ci:7-ci','openlogic:centos-lvm:7-lvm-gen2','oracle:oracle-database:oracle_db_21','oracle:oracle-database-19-3:oracle-database-19-0904','redhat:rhel-sap-ha:90sapha-gen2','suse:sles:12-sp4-gen2','suse:sles-15-sp2-basic:gen2','suse:sles-15-sp2-hpc:gen2','suse:sles-15-sp4-sapcal:gen1','suse:sles-byos:12-sp4','suse:sles-byos:12-sp4-gen2','suse:sles-sap:12-sp4','suse:sles-sap:12-sp4-gen2','suse:sles-sap-byos:12-sp4','suse:sles-sap-byos:12-sp4-gen2','suse:sles-sap-byos:gen2-12-sp4','suse:sles-sapcal:12-sp3','suse:sles-standard:12-sp4-gen2','suse:sles-sap-15-sp2-byos:gen2','talend:talend_re_image:tlnd_re','tenable:tenablecorewas:tenablecoreol8wasbyol','thorntechnologiesllc:sftpgateway:sftpgateway','zscaler:zscaler-private-access:zpa-con-azure') or imageRef matches regex 'almalinux:almalinux:8-gen.*|almalinux:almalinux:9-gen.*|almalinux:almalinux-x86_64:8-gen.*|almalinux:almalinux-x86_64:9-gen.*|canonical:.*:.*|center-for-internet-security-inc:cis-rhel:cis-redhat8-l.*-gen1|center-for-internet-security-inc:cis-rhel:cis-redhat9-l1-gen.*|center-for-internet-security-inc:cis-rhel-8-l.*:cis-rhel8-l.*|center-for-internet-security-inc:cis-rhel9-l1:cis-rhel9-l1.*|center-for-internet-security-inc:cis-ubuntu:cis-ubuntulinux2204-l1-gen.*|microsoftsqlserver:.*:.*|openlogic:centos:7.*|oracle:oracle-database-.*:18..*|oracle:oracle-linux:7.*|openlogic:centos:8.*|oracle:oracle-linux:ol7.*|oracle:oracle-linux:ol8.*|oracle:oracle-linux:ol9.*|redhat:rhel:7.*|redhat:rhel:8.*|redhat:rhel:9.*|redhat:rhel-byos:rhel-lvm7.*|redhat:rhel-byos:rhel-lvm8.*|redhat:rhel-ha:8.*|redhat:rhel-raw:7.*|redhat:rhel-raw:8.*|redhat:rhel-raw:9.*|redhat:rhel-sap:7.*|redhat:rhel-sap-apps:7.*|redhat:rhel-sap-apps:8.*|redhat:rhel-sap-.*:9_0|redhat:rhel-sap-ha:7.*|redhat:rhel-sap-ha:8.*|suse:opensuse-leap-15-.*:gen.*|suse:sles-12-sp5-.*:gen.*|oracle:oracle-linux:ol9-lvm.*|suse:sles-sap-12-sp5.*:gen.*|suse:sles-sap-15-.*:gen.*|suse:sle-hpc-15-sp4:gen.*|suse:sles-15-sp1-sapcal:gen.*|suse:sles-15-sp3-sapcal:gen.*|suse:sles-15-sp4:gen.*|suse:sles-15-sp4-basic:gen.*|suse:sle-hpc-15-sp4-byos:gen.*|suse:sle-hpc-15-sp5-byos:gen.*|suse:sle-hpc-15-sp5:gen.*|suse:sles-15-sp4-byos:gen.*|suse:sles-15-sp4-chost-byos:gen.*|suse:sles-15-sp4-hardened-byos:gen.*|suse:sles-15-sp5-basic:gen.*|suse:sles-15-sp5-byos:gen.*|suse:sles-15-sp5-chost-byos:gen.*|suse:sles-15-sp5-hardened-byos:gen.*|suse:sles-15-sp5-sapcal:gen.*|suse:sles-15-sp5:gen.*|suse:sles-sap-15-sp4-byos:gen.*|suse:sles-sap-15-sp4-hardened-byos:gen.*|suse:sles-sap-15-sp5-byos:gen.*|suse:sles-sap-15-sp5-hardened-byos:gen.*')))\r\n| project id, name, os, type, conf, status, resourceGroup, resourceProperties=properties, isMarketplaceUnsupportedImageUsed)\r\n| union\r\n(resources //union with arc servers, you can play with params as you see fit.\r\n| where type =~ \"microsoft.hybridcompute/machines\"\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n    OS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| extend id=tolower(id)\r\n| extend os=tolower(coalesce(tostring(properties.osName), tostring(properties.osType)))\r\n| where os in~ ('Linux', 'Windows')\r\n| extend status=properties.status\r\n| extend isMarketplaceUnsupportedImageUsed = false\r\n| project id, name, os, type, status,resourceGroup, resourceProperties=properties, isMarketplaceUnsupportedImageUsed,Domain,ConnectionStatus,OSName,Manufacturer,Model))\r\n| join kind=leftouter(\r\n    resources\r\n    | where type in~ (\"Microsoft.SqlVirtualMachine/sqlVirtualMachines\", \"microsoft.azurearcdata/sqlserverinstances\")\r\n    | project resourceId = iff(type =~ \"Microsoft.SqlVirtualMachine/sqlVirtualMachines\", tolower(properties.virtualMachineResourceId), tolower(properties.containerResourceId)), sqlType = type\r\n    | summarize by resourceId, sqlType\r\n) on $left.id == $right.resourceId\r\n| extend type = iff(isnotempty(sqlType), sqlType, type)\r\n| project-away sqlType, resourceId\r\n| where type in~ (\"microsoft.compute/virtualmachines\", \"microsoft.hybridcompute/machines\", \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", \"microsoft.azurearcdata/sqlserverinstances\") // Filtering by resource type\r\n| join kind=leftouter //finally, making a left outer join to fetch updates details from patchassessment\r\n((patchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults\", \"microsoft.hybridcompute/machines/patchassessmentresults\")\r\n| where properties.status =~ \"Succeeded\" or properties.status =~ \"Inprogress\" or (isnotnull(properties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState) and (properties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState =~ \"Unsupported\"))\r\n| parse id with resourceId \"/patchAssessmentResults\" *\r\n| extend resourceId=tolower(resourceId)\r\n| project resourceId, assessProperties=properties))\r\non $left.id == $right.resourceId //join on resources id & patchassessment id that is parsed.\r\n| extend isUnsupported = isMarketplaceUnsupportedImageUsed or (isnotnull(assessProperties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState) and (assessProperties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState =~ \"Unsupported\"))\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n////\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n| summarize\r\ntotal = countif(1 == 1),\r\nnodata = countif((isnull(assessProperties) == true and not(isUnsupported)) or assessProperties.status =~ \"inprogress\"), // not(isUnsupported) condition is for removing unsupported machines.\r\npendingReboot = countif(isnotnull(assessProperties) and assessProperties.rebootPending == \"true\" and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\n//pendingUpdates - when any classification has > 0 updates\r\npendingUpdatesWindows = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Windows\" and (assessProperties.availablePatchCountByClassification.critical>0 or assessProperties.availablePatchCountByClassification.security>0 or assessProperties.availablePatchCountByClassification.updateRollup>0 or assessProperties.availablePatchCountByClassification.featurePack>0 or assessProperties.availablePatchCountByClassification.servicePack>0 or assessProperties.availablePatchCountByClassification.definition>0 or assessProperties.availablePatchCountByClassification.tools>0 or assessProperties.availablePatchCountByClassification.updates>0) and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\npendingUpdatesLinux = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Linux\" and (assessProperties.availablePatchCountByClassification.security>0 or assessProperties.availablePatchCountByClassification.other>0) and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\n//noPendingUpdates - when all classifications has 0 updates\r\nnoPendingUpdatesWindows = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Windows\" and (assessProperties.availablePatchCountByClassification.critical==0 and assessProperties.availablePatchCountByClassification.security==0 and assessProperties.availablePatchCountByClassification.updateRollup==0 and assessProperties.availablePatchCountByClassification.featurePack==0 and assessProperties.availablePatchCountByClassification.servicePack==0 and assessProperties.availablePatchCountByClassification.definition==0 and assessProperties.availablePatchCountByClassification.tools==0 and assessProperties.availablePatchCountByClassification.updates==0) and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\nnoPendingUpdatesLinux = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Linux\" and (assessProperties.availablePatchCountByClassification.security==0 and assessProperties.availablePatchCountByClassification.other==0) and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\nunsupported = countif(isUnsupported and not(isnotnull(assessProperties) and assessProperties.status =~ \"inprogress\"))\r\n| project total, nodata, pendingReboot,pendingUpdates = pendingUpdatesWindows+pendingUpdatesLinux, noPendingUpdates = noPendingUpdatesWindows+noPendingUpdatesLinux, unsupported\r\n| project machinePack = pack(\"No pending updates\", noPendingUpdates, \"Pending updates\", pendingUpdates, \"Pending reboot\", pendingReboot,  \"No updates data\", nodata, \"Unsupported\",unsupported, \"Total machines\", total)\r\n| mv-expand machinePack\r\n| extend machine = tostring(bag_keys(machinePack)[0])\r\n| extend count_ = tolong(machinePack[machine])\r\n| project machine, count_ \r\n| where machine !=\"Total machines\"\r\n| where machine != \"Unsupported\"",
              "size": 1,
              "title": "Update Status",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "piechart"
            },
            "customWidth": "50",
            "name": "query - 0",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n    OS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| extend joinId = tolower(id)\r\n| project joinId\r\n| join kind=inner \r\n(\r\npatchassessmentresources\r\n| where type in~ (\"microsoft.hybridcompute/machines/patchassessmentresults/softwarepatches\")\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n//| where resourceGroup in ({ResourceGroup})\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n| extend id = tolower(id)\r\n| parse id with resourceId \"/patchassessmentresults\" *\r\n| extend joinId=tolower(resourceId)\r\n//| where isnotnull(properties.kbId)\r\n| extend MissingUpdate = tostring(properties.patchName)\r\n| extend Classification = tostring(properties.classifications[0])\r\n| project joinId, MissingUpdate, Classification\r\n) \r\non $left.joinId == $right.joinId\r\n| extend ComputerName = split(joinId,\"/\")[-1]\r\n| summarize  ComputerCount = count(ComputerName) by MissingUpdate, Classification\r\n//| summarize ComputerNames = make_set(ComputerName) by MissingUpdate, Classification\r\n//| extend ComputerNames = strcat_array(ComputerNames,\", \")//| summarize Machines = count() by MissingUpdate, Classification\r\n| order by ComputerCount desc\r\n\r\n",
              "size": 1,
              "title": "Pending Updates",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ]
            },
            "customWidth": "50",
            "name": "query - 5",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "//It will join with resources table and patchassessmentresources\r\n((resources //join of virtual machines, you can play with params as you see fit.\r\n| where type =~ \"microsoft.compute/virtualmachines\"\r\n//excluding non-arc servers ///\r\n| where name == \"xxxxxxxxxx\"\r\n//excluding non-arc servers ///\r\n| where properties.storageProfile.osDisk.osType in~ ('Linux','Windows')\r\n| extend conf = iff(properties.storageProfile.osDisk.osType =~ \"windows\", properties.osProfile.windowsConfiguration.patchSettings.patchMode, properties.osProfile.linuxConfiguration.patchSettings.patchMode)\r\n| extend os = tolower(tostring(properties.storageProfile.osDisk.osType))\r\n| extend id=tolower(id)\r\n| extend status=properties.extended.instanceView.powerState.displayStatus\r\n| extend imageRef = strcat(tolower(tostring(properties.storageProfile.imageReference.publisher)), \":\", tolower(tostring(properties.storageProfile.imageReference.offer)), \":\", tolower(tostring(properties.storageProfile.imageReference.sku)))\r\n// For marketplace images, check in the list of allow listed images for guest patching\r\n| extend isMarketplaceUnsupportedImageUsed = (isnotempty(properties.storageProfile.imageReference.publisher) and isnotempty(properties.storageProfile.imageReference.offer) and isnotempty(properties.storageProfile.imageReference.sku)) and\r\n    not(iff(os =~ \"windows\",\r\n        (imageRef in ('microsoftwindowsserver:microsoftserveroperatingsystems-previews:windows-server-vnext-azure-edition-core','microsoftwindowsserver:windowsserver:2008-r2-sp1','microsoftwindowsserver:windowsserver:2012-r2-datacenter','microsoftwindowsserver:windowsserver:2012-r2-datacenter-gensecond','microsoftwindowsserver:windowsserver:2012-r2-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2012-r2-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserver:2016-datacenter','microsoftwindowsserver:windowsserver:2016-datacenter-gensecond','microsoftwindowsserver:windowsserver:2016-datacenter-server-core','microsoftwindowsserver:windowsserver:2016-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2016-datacenter-with-containers','microsoftwindowsserver:windowsserver:2019-datacenter','microsoftwindowsserver:windowsserver:2019-datacenter-core','microsoftwindowsserver:windowsserver:2019-datacenter-gensecond','microsoftwindowsserver:windowsserver:2019-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2019-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserver:2019-datacenter-with-containers','microsoftwindowsserver:windowsserver:2022-datacenter','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-core','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-core-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-hotpatch','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-hotpatch-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-core','microsoftwindowsserver:windowsserver:2022-datacenter-core-g2','microsoftwindowsserver:windowsserver:2022-datacenter-g2','microsoftwindowsserver:windowsserver:2022-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserverhotpatch-previews:windows-server-2022-azure-edition-hotpatch','microsoftwindowsserver:microsoftserveroperatingsystems-previews:windows-server-2025-azure-edition-hotpatch','microsoftazuresiterecovery:process-server:windows-2012-r2-datacenter','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v4','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v5','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v6','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v7','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-u8','microsoftsqlserver:sql2016sp1-ws2016:standard','microsoftsqlserver:sql2016sp2-ws2016:standard','microsoftsqlserver:sql2017-ws2016:enterprise','microsoftsqlserver:sql2017-ws2016:standard','microsoftsqlserver:sql2019-ws2019:enterprise','microsoftsqlserver:sql2019-ws2019:sqldev','microsoftsqlserver:sql2019-ws2019:standard','microsoftsqlserver:sql2019-ws2019:standard-gen2','center-for-internet-security-inc:cis-windows-server-2016-v1-0-0-l1:cis-ws2016-l1','center-for-internet-security-inc:cis-windows-server-2016-v1-0-0-l2:cis-ws2016-l2','center-for-internet-security-inc:cis-windows-server-2019-v1-0-0-l1:cis-ws2019-l1','center-for-internet-security-inc:cis-windows-server-2019-v1-0-0-l2:cis-ws2019-l2','center-for-internet-security-inc:cis-win-2019-stig:cis-win-2019-stig','center-for-internet-security-inc:cis-windows-server:cis-windows-server2019-stig-gen1','center-for-internet-security-inc:cis-windows-server-2012-r2-v2-2-1-l2:cis-ws2012-r2-l2','cloud-infrastructure-services:servercore-2019:servercore-2019','cloud-infrastructure-services:hpc2019-windows-server-2019:hpc2019-windows-server-2019','cognosys:sql-server-2016-sp2-std-win2016-debug-utilities:sql-server-2016-sp2-std-win2016-debug-utilities','cloud-infrastructure-services:ad-dc-2016:ad-dc-2016','cloud-infrastructure-services:ad-dc-2019:ad-dc-2019','cloud-infrastructure-services:ad-dc-2022:ad-dc-2022','cloud-infrastructure-services:sftp-2016:sftp-2016','cloud-infrastructure-services:rds-farm-2019:rds-farm-2019','cloud-infrastructure-services:hmailserver:hmailserver-email-server-2016','veeam:office365backup:veeamoffice365backup') or imageRef matches regex 'microsoftwindowsserver:windowsserver:.*|microsoftbiztalkserver:biztalk-server:.*|microsoftdynamicsax:dynamics:.*|microsoftpowerbi:.*:.*|microsoftsharepoint:microsoftsharepointserver:.*|microsoftsqlserver:.*:.*|microsoftvisualstudio:visualstudio.*:.*-ws2012r2|microsoftvisualstudio:visualstudio.*:.*-ws2016|microsoftvisualstudio:visualstudio.*:.*-ws2019|microsoftvisualstudio:visualstudio.*:.*-ws2022|microsoftwindowsserver:windows-cvm:.*|microsoftwindowsserver:windowsserverdotnet:.*|microsoftwindowsserver:windowsserver-gen2preview:.*|microsoftwindowsserver:windowsserversemiannual:.*|microsoftwindowsserver:windowsserverupgrade:.*|microsoftwindowsserverhpcpack:windowsserverhpcpack:.*|microsoft-dsvm:dsvm-windows:.*|microsoft-dsvm:dsvm-win-2019:.*|microsoft-dsvm:dsvm-win-2022:.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2016-l.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2019-l.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2022-l.*|center-for-internet-security-inc:cis-windows-server-2022-l1:.*|center-for-internet-security-inc:cis-windows-server-2022-l2:.*|microsoft-ads:windows-data-science-vm:.*|filemagellc:filemage-gateway-vm-win:filemage-gateway-vm-win-.*|esri:arcgis-enterprise.*:byol.*|esri:pro-byol:pro-byol-.*|veeam:veeam-backup-replication:veeam-backup-replication-v.*|southrivertech1586314123192:tn-ent-payg:tnentpayg.*|belindaczsro1588885355210:belvmsrv01:belvmsrv.*|southrivertech1586314123192:tn-sftp-payg:tnsftppayg.*'),\r\n        not(imageRef in ('redhat:rhel-ha:81_gen2') or imageRef matches regex 'openlogic:centos:8.*|openlogic:centos-hpc:.*|microsoftsqlserver:sql2019-sles.*:.*|microsoftsqlserver:sql2019-rhel7:.*|microsoftsqlserver:sql2017-rhel7:.*|microsoft-ads:.*:.*|suse:sles-sap-15-.*-byos:gen.*') and\r\n            (imageRef in ('canonical:ubuntuserver:16.04-lts','canonical:ubuntuserver:16.04.0-lts','canonical:ubuntuserver:18.04-lts','canonical:ubuntuserver:18_04-lts-gen2','canonical:0001-com-ubuntu-pro-bionic:pro-18_04-lts','canonical:0001-com-ubuntu-pro-focal:pro-20_04-lts','canonical:0001-com-ubuntu-pro-focal:pro-20_04-lts-gen2','canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts-gen2','canonical:0001-com-ubuntu-server-focal:20_04-lts','canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2','canonical:0001-com-ubuntu-server-jammy:22_04-lts','canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2','microsoftcblmariner:cbl-mariner:cbl-mariner-1','microsoftcblmariner:cbl-mariner:1-gen2','microsoftcblmariner:cbl-mariner:cbl-mariner-2','microsoftcblmariner:cbl-mariner:cbl-mariner-2-gen2','microsoft-aks:aks:aks-engine-ubuntu-1804-202112','microsoft-dsvm:aml-workstation:ubuntu-20','microsoft-dsvm:aml-workstation:ubuntu-20-gen2','openlogic:centos:7.2','openlogic:centos:7.3','openlogic:centos:7.4','openlogic:centos:7.5','openlogic:centos:7.6','openlogic:centos:7.7','openlogic:centos:7_8','openlogic:centos:7_9','openlogic:centos:7_9-gen2','openlogic:centos:8.0','openlogic:centos:8_1','openlogic:centos:8_2','openlogic:centos:8_3','openlogic:centos:8_4','openlogic:centos:8_5','openlogic:centos-lvm:7-lvm','openlogic:centos-lvm:8-lvm','redhat:rhel:7.2','redhat:rhel:7.3','redhat:rhel:7.4','redhat:rhel:7.5','redhat:rhel:7.6','redhat:rhel:7.7','redhat:rhel:7.8','redhat:rhel:7_9','redhat:rhel:7-lvm','redhat:rhel:7-raw','redhat:rhel:8','redhat:rhel:8.1','redhat:rhel:81gen2','redhat:rhel:8.2','redhat:rhel:82gen2','redhat:rhel:8_3','redhat:rhel:83-gen2','redhat:rhel:8_4','redhat:rhel:84-gen2','redhat:rhel:8_5','redhat:rhel:85-gen2','redhat:rhel:8_6','redhat:rhel:86-gen2','redhat:rhel:8_7','redhat:rhel:8_8','redhat:rhel:8-lvm','redhat:rhel:8-lvm-gen2','redhat:rhel-raw:8-raw','redhat:rhel-raw:8-raw-gen2','redhat:rhel:9_0','redhat:rhel:9_1','redhat:rhel:9-lvm','redhat:rhel:9-lvm-gen2','suse:sles-12-sp5:gen1','suse:sles-12-sp5:gen2','suse:sles-15-sp2:gen1','suse:sles-15-sp2:gen2','almalinux:almalinux-x86_64:8_7-gen2','almalinux:almalinux-hpc:8_6-hpc','almalinux:almalinux-hpc:8_6-hpc-gen2','aviatrix-systems:aviatrix-bundle-payg:aviatrix-enterprise-bundle-byol','aviatrix-systems:aviatrix-copilot:avx-cplt-byol-01','aviatrix-systems:aviatrix-copilot:avx-cplt-byol-02','aviatrix-systems:aviatrix-companion-gateway-v9:aviatrix-companion-gateway-v9','aviatrix-systems:aviatrix-companion-gateway-v10:aviatrix-companion-gateway-v10','aviatrix-systems:aviatrix-companion-gateway-v10:aviatrix-companion-gateway-v10u','aviatrix-systems:aviatrix-companion-gateway-v12:aviatrix-companion-gateway-v12','aviatrix-systems:aviatrix-companion-gateway-v13:aviatrix-companion-gateway-v13','aviatrix-systems:aviatrix-companion-gateway-v13:aviatrix-companion-gateway-v13u','aviatrix-systems:aviatrix-companion-gateway-v14:aviatrix-companion-gateway-v14','aviatrix-systems:aviatrix-companion-gateway-v14:aviatrix-companion-gateway-v14u','aviatrix-systems:aviatrix-companion-gateway-v16:aviatrix-companion-gateway-v16','canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts','center-for-internet-security-inc:cis-rhel:cis-redhat7-l1-gen1','center-for-internet-security-inc:cis-rhel-7-l2:cis-rhel7-l2','center-for-internet-security-inc:cis-rhel-8-stig:cis-rhel-8-stig','center-for-internet-security-inc:cis-oracle-linux-8-l1:cis-oracle8-l1','center-for-internet-security-inc:cis-ubuntu:cis-ubuntu1804-l1','center-for-internet-security-inc:cis-ubuntu:cis-ubuntulinux2004-l1-gen1','center-for-internet-security-inc:cis-ubuntu-linux-1804-l1:cis-ubuntu1804-l1','center-for-internet-security-inc:cis-ubuntu-linux-2004-l1:cis-ubuntu2004-l1','center-for-internet-security-inc:cis-ubuntu-linux-2204-l1:cis-ubuntu-linux-2204-l1','center-for-internet-security-inc:cis-ubuntu-linux-2204-l1:cis-ubuntu-linux-2204-l1-gen2','cloud-infrastructure-services:dns-ubuntu-2004:dns-ubuntu-2004','cloud-infrastructure-services:squid-ubuntu-2004:squid-ubuntu-2004','cloud-infrastructure-services:load-balancer-nginx:load-balancer-nginx','cloudera:cloudera-centos-os:7_5','cncf-upstream:capi:ubuntu-1804-gen1','cncf-upstream:capi:ubuntu-2004-gen1','cncf-upstream:capi:ubuntu-2204-gen1','credativ:debian:9','credativ:debian:9-backports','debian:debian-10:10','debian:debian-10:10-gen2','debian:debian-10:10-backports','debian:debian-10:10-backports-gen2','debian:debian-10-daily:10','debian:debian-10-daily:10-gen2','debian:debian-10-daily:10-backports','debian:debian-10-daily:10-backports-gen2','debian:debian-11:11','debian:debian-11:11-gen2','debian:debian-11:11-backports','debian:debian-11:11-backports-gen2','debian:debian-11-daily:11','debian:debian-11-daily:11-gen2','debian:debian-11-daily:11-backports','debian:debian-11-daily:11-backports-gen2','erockyenterprisesoftwarefoundationinc1653071250513:rockylinux:free','erockyenterprisesoftwarefoundationinc1653071250513:rockylinux-9:rockylinux-9','github:github-enterprise:github-enterprise','matillion:matillion:matillion-etl-for-snowflake','microsoft-dsvm:aml-workstation:ubuntu','microsoft-dsvm:ubuntu-hpc:1804','microsoft-dsvm:ubuntu-hpc:2004-preview-ndv5','microsoft-dsvm:ubuntu-hpc:2004','microsoft-dsvm:ubuntu-hpc:2204-preview-ndv5','microsoft-dsvm:ubuntu-hpc:2204','microsoft-dsvm:ubuntu-1804:1804-gen2','microsoft-dsvm:ubuntu-2004:2004','microsoft-dsvm:ubuntu-2004:2004-gen2','netapp:netapp-oncommand-cloud-manager:occm-byol','nginxinc:nginx-plus-ent-v1:nginx-plus-ent-centos7','ntegralinc1586961136942:ntg_oracle_8_7:ntg_oracle_8_7','ntegralinc1586961136942:ntg_ubuntu_20_04_lts:ntg_ubuntu_20_04_lts','openlogic:centos-hpc:7.1','openlogic:centos-hpc:7.3','oracle:oracle-linux:8','oracle:oracle-linux:8-ci','oracle:oracle-linux:81','oracle:oracle-linux:81-ci','oracle:oracle-linux:81-gen2','oracle:oracle-linux:ol82','oracle:oracle-linux:ol8_2-gen2','oracle:oracle-linux:ol82-gen2','oracle:oracle-linux:ol83-lvm','oracle:oracle-linux:ol83-lvm-gen2','oracle:oracle-linux:ol84-lvm','oracle:oracle-linux:ol84-lvm-gen2','procomputers:almalinux-8-7:almalinux-8-7','procomputers:rhel-8-2:rhel-8-2','procomputers:rhel-8-8-gen2:rhel-8-8-gen2','procomputers:rhel-8-9-gen2:rhel-8-9-gen2','redhat:rhel:89-gen2','redhat:rhel-byos:rhel-raw76','redhat:rhel-byos:rhel-lvm88','redhat:rhel-byos:rhel-lvm88-gen2','redhat:rhel-byos:rhel-lvm92','redhat:rhel-byos:rhel-lvm-92-gen2','redhat:rhel-ha:9_2','redhat:rhel-ha:9_2-gen2','redhat:rhel-sap-apps:9_0','redhat:rhel-sap-apps:90sapapps-gen2','redhat:rhel-sap-apps:9_2','redhat:rhel-sap-apps:92sapapps-gen2','redhat:rhel-sap-ha:9_2','redhat:rhel-sap-ha:92sapha-gen2','openlogic:centos-ci:7-ci','openlogic:centos-lvm:7-lvm-gen2','oracle:oracle-database:oracle_db_21','oracle:oracle-database-19-3:oracle-database-19-0904','redhat:rhel-sap-ha:90sapha-gen2','suse:sles:12-sp4-gen2','suse:sles-15-sp2-basic:gen2','suse:sles-15-sp2-hpc:gen2','suse:sles-15-sp4-sapcal:gen1','suse:sles-byos:12-sp4','suse:sles-byos:12-sp4-gen2','suse:sles-sap:12-sp4','suse:sles-sap:12-sp4-gen2','suse:sles-sap-byos:12-sp4','suse:sles-sap-byos:12-sp4-gen2','suse:sles-sap-byos:gen2-12-sp4','suse:sles-sapcal:12-sp3','suse:sles-standard:12-sp4-gen2','suse:sles-sap-15-sp2-byos:gen2','talend:talend_re_image:tlnd_re','tenable:tenablecorewas:tenablecoreol8wasbyol','thorntechnologiesllc:sftpgateway:sftpgateway','zscaler:zscaler-private-access:zpa-con-azure') or imageRef matches regex 'almalinux:almalinux:8-gen.*|almalinux:almalinux:9-gen.*|almalinux:almalinux-x86_64:8-gen.*|almalinux:almalinux-x86_64:9-gen.*|canonical:.*:.*|center-for-internet-security-inc:cis-rhel:cis-redhat8-l.*-gen1|center-for-internet-security-inc:cis-rhel:cis-redhat9-l1-gen.*|center-for-internet-security-inc:cis-rhel-8-l.*:cis-rhel8-l.*|center-for-internet-security-inc:cis-rhel9-l1:cis-rhel9-l1.*|center-for-internet-security-inc:cis-ubuntu:cis-ubuntulinux2204-l1-gen.*|microsoftsqlserver:.*:.*|openlogic:centos:7.*|oracle:oracle-database-.*:18..*|oracle:oracle-linux:7.*|openlogic:centos:8.*|oracle:oracle-linux:ol7.*|oracle:oracle-linux:ol8.*|oracle:oracle-linux:ol9.*|redhat:rhel:7.*|redhat:rhel:8.*|redhat:rhel:9.*|redhat:rhel-byos:rhel-lvm7.*|redhat:rhel-byos:rhel-lvm8.*|redhat:rhel-ha:8.*|redhat:rhel-raw:7.*|redhat:rhel-raw:8.*|redhat:rhel-raw:9.*|redhat:rhel-sap:7.*|redhat:rhel-sap-apps:7.*|redhat:rhel-sap-apps:8.*|redhat:rhel-sap-.*:9_0|redhat:rhel-sap-ha:7.*|redhat:rhel-sap-ha:8.*|suse:opensuse-leap-15-.*:gen.*|suse:sles-12-sp5-.*:gen.*|oracle:oracle-linux:ol9-lvm.*|suse:sles-sap-12-sp5.*:gen.*|suse:sles-sap-15-.*:gen.*|suse:sle-hpc-15-sp4:gen.*|suse:sles-15-sp1-sapcal:gen.*|suse:sles-15-sp3-sapcal:gen.*|suse:sles-15-sp4:gen.*|suse:sles-15-sp4-basic:gen.*|suse:sle-hpc-15-sp4-byos:gen.*|suse:sle-hpc-15-sp5-byos:gen.*|suse:sle-hpc-15-sp5:gen.*|suse:sles-15-sp4-byos:gen.*|suse:sles-15-sp4-chost-byos:gen.*|suse:sles-15-sp4-hardened-byos:gen.*|suse:sles-15-sp5-basic:gen.*|suse:sles-15-sp5-byos:gen.*|suse:sles-15-sp5-chost-byos:gen.*|suse:sles-15-sp5-hardened-byos:gen.*|suse:sles-15-sp5-sapcal:gen.*|suse:sles-15-sp5:gen.*|suse:sles-sap-15-sp4-byos:gen.*|suse:sles-sap-15-sp4-hardened-byos:gen.*|suse:sles-sap-15-sp5-byos:gen.*|suse:sles-sap-15-sp5-hardened-byos:gen.*')))\r\n| project id, name, os, type, conf, status, resourceGroup, resourceProperties=properties, isMarketplaceUnsupportedImageUsed)\r\n| union\r\n(resources //union with arc servers, you can play with params as you see fit.\r\n| where type =~ \"microsoft.hybridcompute/machines\"\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n    OS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| extend id=tolower(id)\r\n| extend os=tolower(coalesce(tostring(properties.osName), tostring(properties.osType)))\r\n| where os in~ ('Linux', 'Windows')\r\n| extend status=properties.status\r\n| extend isMarketplaceUnsupportedImageUsed = false\r\n| project id, name, os, type, status,resourceGroup, resourceProperties=properties, isMarketplaceUnsupportedImageUsed,Domain,ConnectionStatus,OSName,Manufacturer,Model))\r\n| join kind=leftouter(\r\n    resources\r\n    | where type in~ (\"Microsoft.SqlVirtualMachine/sqlVirtualMachines\", \"microsoft.azurearcdata/sqlserverinstances\")\r\n    | project resourceId = iff(type =~ \"Microsoft.SqlVirtualMachine/sqlVirtualMachines\", tolower(properties.virtualMachineResourceId), tolower(properties.containerResourceId)), sqlType = type\r\n    | summarize by resourceId, sqlType\r\n) on $left.id == $right.resourceId\r\n| extend type = iff(isnotempty(sqlType), sqlType, type)\r\n| project-away sqlType, resourceId\r\n| where type in~ (\"microsoft.compute/virtualmachines\", \"microsoft.hybridcompute/machines\", \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", \"microsoft.azurearcdata/sqlserverinstances\") // Filtering by resource type\r\n| join kind=leftouter //finally, making a left outer join to fetch updates details from patchassessment\r\n((patchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults\", \"microsoft.hybridcompute/machines/patchassessmentresults\")\r\n| where properties.status =~ \"Succeeded\" or properties.status =~ \"Inprogress\" or (isnotnull(properties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState) and (properties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState =~ \"Unsupported\"))\r\n| parse id with resourceId \"/patchAssessmentResults\" *\r\n| extend resourceId=tolower(resourceId)\r\n| project resourceId, assessProperties=properties))\r\non $left.id == $right.resourceId //join on resources id & patchassessment id that is parsed.\r\n| extend isUnsupported = isMarketplaceUnsupportedImageUsed or (isnotnull(assessProperties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState) and (assessProperties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState =~ \"Unsupported\"))\r\n//Pending Reboot\r\n| where isnotnull(assessProperties) and assessProperties.rebootPending == \"true\" and not(isUnsupported or assessProperties.status =~ \"inprogress\")\r\n| extend lastassessment = todatetime(assessProperties.startDateTime)\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n//| where resourceGroup in ({ResourceGroup})\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n| extend OSName = tostring(resourceProperties.osSku)\r\n| project id,Domain,resourceGroup,os,ConnectionStatus,lastassessment",
              "size": 1,
              "title": "Pending Reboot",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "id",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "21ch"
                    }
                  },
                  {
                    "columnMatch": "resourceGroup",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "20ch"
                    }
                  },
                  {
                    "columnMatch": "lastassessment",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "21ch"
                    }
                  },
                  {
                    "columnMatch": "OSName",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "42.5714ch"
                    }
                  },
                  {
                    "columnMatch": "status",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "15.5714ch"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "id",
                    "label": "Resource"
                  },
                  {
                    "columnId": "resourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "os",
                    "label": "Operating System"
                  },
                  {
                    "columnId": "ConnectionStatus",
                    "label": "Connection Status"
                  },
                  {
                    "columnId": "lastassessment",
                    "label": "Last Assessment"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 0 - Copy",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "//It will join with resources table and patchassessmentresources\r\n((resources //join of virtual machines, you can play with params as you see fit.\r\n| where type =~ \"microsoft.compute/virtualmachines\"\r\n//excluding non-arc servers ///\r\n| where name == \"xxxxxxxxxx\"\r\n//excluding non-arc servers ///\r\n| where properties.storageProfile.osDisk.osType in~ ('Linux','Windows')\r\n| extend conf = iff(properties.storageProfile.osDisk.osType =~ \"windows\", properties.osProfile.windowsConfiguration.patchSettings.patchMode, properties.osProfile.linuxConfiguration.patchSettings.patchMode)\r\n| extend os = tolower(tostring(properties.storageProfile.osDisk.osType))\r\n| extend id=tolower(id)\r\n| extend status=properties.extended.instanceView.powerState.displayStatus\r\n| extend imageRef = strcat(tolower(tostring(properties.storageProfile.imageReference.publisher)), \":\", tolower(tostring(properties.storageProfile.imageReference.offer)), \":\", tolower(tostring(properties.storageProfile.imageReference.sku)))\r\n// For marketplace images, check in the list of allow listed images for guest patching\r\n| extend isMarketplaceUnsupportedImageUsed = (isnotempty(properties.storageProfile.imageReference.publisher) and isnotempty(properties.storageProfile.imageReference.offer) and isnotempty(properties.storageProfile.imageReference.sku)) and\r\n    not(iff(os =~ \"windows\",\r\n        (imageRef in ('microsoftwindowsserver:microsoftserveroperatingsystems-previews:windows-server-vnext-azure-edition-core','microsoftwindowsserver:windowsserver:2008-r2-sp1','microsoftwindowsserver:windowsserver:2012-r2-datacenter','microsoftwindowsserver:windowsserver:2012-r2-datacenter-gensecond','microsoftwindowsserver:windowsserver:2012-r2-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2012-r2-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserver:2016-datacenter','microsoftwindowsserver:windowsserver:2016-datacenter-gensecond','microsoftwindowsserver:windowsserver:2016-datacenter-server-core','microsoftwindowsserver:windowsserver:2016-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2016-datacenter-with-containers','microsoftwindowsserver:windowsserver:2019-datacenter','microsoftwindowsserver:windowsserver:2019-datacenter-core','microsoftwindowsserver:windowsserver:2019-datacenter-gensecond','microsoftwindowsserver:windowsserver:2019-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2019-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserver:2019-datacenter-with-containers','microsoftwindowsserver:windowsserver:2022-datacenter','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-core','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-core-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-hotpatch','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-hotpatch-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-core','microsoftwindowsserver:windowsserver:2022-datacenter-core-g2','microsoftwindowsserver:windowsserver:2022-datacenter-g2','microsoftwindowsserver:windowsserver:2022-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserverhotpatch-previews:windows-server-2022-azure-edition-hotpatch','microsoftwindowsserver:microsoftserveroperatingsystems-previews:windows-server-2025-azure-edition-hotpatch','microsoftazuresiterecovery:process-server:windows-2012-r2-datacenter','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v4','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v5','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v6','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v7','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-u8','microsoftsqlserver:sql2016sp1-ws2016:standard','microsoftsqlserver:sql2016sp2-ws2016:standard','microsoftsqlserver:sql2017-ws2016:enterprise','microsoftsqlserver:sql2017-ws2016:standard','microsoftsqlserver:sql2019-ws2019:enterprise','microsoftsqlserver:sql2019-ws2019:sqldev','microsoftsqlserver:sql2019-ws2019:standard','microsoftsqlserver:sql2019-ws2019:standard-gen2','center-for-internet-security-inc:cis-windows-server-2016-v1-0-0-l1:cis-ws2016-l1','center-for-internet-security-inc:cis-windows-server-2016-v1-0-0-l2:cis-ws2016-l2','center-for-internet-security-inc:cis-windows-server-2019-v1-0-0-l1:cis-ws2019-l1','center-for-internet-security-inc:cis-windows-server-2019-v1-0-0-l2:cis-ws2019-l2','center-for-internet-security-inc:cis-win-2019-stig:cis-win-2019-stig','center-for-internet-security-inc:cis-windows-server:cis-windows-server2019-stig-gen1','center-for-internet-security-inc:cis-windows-server-2012-r2-v2-2-1-l2:cis-ws2012-r2-l2','cloud-infrastructure-services:servercore-2019:servercore-2019','cloud-infrastructure-services:hpc2019-windows-server-2019:hpc2019-windows-server-2019','cognosys:sql-server-2016-sp2-std-win2016-debug-utilities:sql-server-2016-sp2-std-win2016-debug-utilities','cloud-infrastructure-services:ad-dc-2016:ad-dc-2016','cloud-infrastructure-services:ad-dc-2019:ad-dc-2019','cloud-infrastructure-services:ad-dc-2022:ad-dc-2022','cloud-infrastructure-services:sftp-2016:sftp-2016','cloud-infrastructure-services:rds-farm-2019:rds-farm-2019','cloud-infrastructure-services:hmailserver:hmailserver-email-server-2016','veeam:office365backup:veeamoffice365backup') or imageRef matches regex 'microsoftwindowsserver:windowsserver:.*|microsoftbiztalkserver:biztalk-server:.*|microsoftdynamicsax:dynamics:.*|microsoftpowerbi:.*:.*|microsoftsharepoint:microsoftsharepointserver:.*|microsoftsqlserver:.*:.*|microsoftvisualstudio:visualstudio.*:.*-ws2012r2|microsoftvisualstudio:visualstudio.*:.*-ws2016|microsoftvisualstudio:visualstudio.*:.*-ws2019|microsoftvisualstudio:visualstudio.*:.*-ws2022|microsoftwindowsserver:windows-cvm:.*|microsoftwindowsserver:windowsserverdotnet:.*|microsoftwindowsserver:windowsserver-gen2preview:.*|microsoftwindowsserver:windowsserversemiannual:.*|microsoftwindowsserver:windowsserverupgrade:.*|microsoftwindowsserverhpcpack:windowsserverhpcpack:.*|microsoft-dsvm:dsvm-windows:.*|microsoft-dsvm:dsvm-win-2019:.*|microsoft-dsvm:dsvm-win-2022:.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2016-l.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2019-l.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2022-l.*|center-for-internet-security-inc:cis-windows-server-2022-l1:.*|center-for-internet-security-inc:cis-windows-server-2022-l2:.*|microsoft-ads:windows-data-science-vm:.*|filemagellc:filemage-gateway-vm-win:filemage-gateway-vm-win-.*|esri:arcgis-enterprise.*:byol.*|esri:pro-byol:pro-byol-.*|veeam:veeam-backup-replication:veeam-backup-replication-v.*|southrivertech1586314123192:tn-ent-payg:tnentpayg.*|belindaczsro1588885355210:belvmsrv01:belvmsrv.*|southrivertech1586314123192:tn-sftp-payg:tnsftppayg.*'),\r\n        not(imageRef in ('redhat:rhel-ha:81_gen2') or imageRef matches regex 'openlogic:centos:8.*|openlogic:centos-hpc:.*|microsoftsqlserver:sql2019-sles.*:.*|microsoftsqlserver:sql2019-rhel7:.*|microsoftsqlserver:sql2017-rhel7:.*|microsoft-ads:.*:.*|suse:sles-sap-15-.*-byos:gen.*') and\r\n            (imageRef in ('canonical:ubuntuserver:16.04-lts','canonical:ubuntuserver:16.04.0-lts','canonical:ubuntuserver:18.04-lts','canonical:ubuntuserver:18_04-lts-gen2','canonical:0001-com-ubuntu-pro-bionic:pro-18_04-lts','canonical:0001-com-ubuntu-pro-focal:pro-20_04-lts','canonical:0001-com-ubuntu-pro-focal:pro-20_04-lts-gen2','canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts-gen2','canonical:0001-com-ubuntu-server-focal:20_04-lts','canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2','canonical:0001-com-ubuntu-server-jammy:22_04-lts','canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2','microsoftcblmariner:cbl-mariner:cbl-mariner-1','microsoftcblmariner:cbl-mariner:1-gen2','microsoftcblmariner:cbl-mariner:cbl-mariner-2','microsoftcblmariner:cbl-mariner:cbl-mariner-2-gen2','microsoft-aks:aks:aks-engine-ubuntu-1804-202112','microsoft-dsvm:aml-workstation:ubuntu-20','microsoft-dsvm:aml-workstation:ubuntu-20-gen2','openlogic:centos:7.2','openlogic:centos:7.3','openlogic:centos:7.4','openlogic:centos:7.5','openlogic:centos:7.6','openlogic:centos:7.7','openlogic:centos:7_8','openlogic:centos:7_9','openlogic:centos:7_9-gen2','openlogic:centos:8.0','openlogic:centos:8_1','openlogic:centos:8_2','openlogic:centos:8_3','openlogic:centos:8_4','openlogic:centos:8_5','openlogic:centos-lvm:7-lvm','openlogic:centos-lvm:8-lvm','redhat:rhel:7.2','redhat:rhel:7.3','redhat:rhel:7.4','redhat:rhel:7.5','redhat:rhel:7.6','redhat:rhel:7.7','redhat:rhel:7.8','redhat:rhel:7_9','redhat:rhel:7-lvm','redhat:rhel:7-raw','redhat:rhel:8','redhat:rhel:8.1','redhat:rhel:81gen2','redhat:rhel:8.2','redhat:rhel:82gen2','redhat:rhel:8_3','redhat:rhel:83-gen2','redhat:rhel:8_4','redhat:rhel:84-gen2','redhat:rhel:8_5','redhat:rhel:85-gen2','redhat:rhel:8_6','redhat:rhel:86-gen2','redhat:rhel:8_7','redhat:rhel:8_8','redhat:rhel:8-lvm','redhat:rhel:8-lvm-gen2','redhat:rhel-raw:8-raw','redhat:rhel-raw:8-raw-gen2','redhat:rhel:9_0','redhat:rhel:9_1','redhat:rhel:9-lvm','redhat:rhel:9-lvm-gen2','suse:sles-12-sp5:gen1','suse:sles-12-sp5:gen2','suse:sles-15-sp2:gen1','suse:sles-15-sp2:gen2','almalinux:almalinux-x86_64:8_7-gen2','almalinux:almalinux-hpc:8_6-hpc','almalinux:almalinux-hpc:8_6-hpc-gen2','aviatrix-systems:aviatrix-bundle-payg:aviatrix-enterprise-bundle-byol','aviatrix-systems:aviatrix-copilot:avx-cplt-byol-01','aviatrix-systems:aviatrix-copilot:avx-cplt-byol-02','aviatrix-systems:aviatrix-companion-gateway-v9:aviatrix-companion-gateway-v9','aviatrix-systems:aviatrix-companion-gateway-v10:aviatrix-companion-gateway-v10','aviatrix-systems:aviatrix-companion-gateway-v10:aviatrix-companion-gateway-v10u','aviatrix-systems:aviatrix-companion-gateway-v12:aviatrix-companion-gateway-v12','aviatrix-systems:aviatrix-companion-gateway-v13:aviatrix-companion-gateway-v13','aviatrix-systems:aviatrix-companion-gateway-v13:aviatrix-companion-gateway-v13u','aviatrix-systems:aviatrix-companion-gateway-v14:aviatrix-companion-gateway-v14','aviatrix-systems:aviatrix-companion-gateway-v14:aviatrix-companion-gateway-v14u','aviatrix-systems:aviatrix-companion-gateway-v16:aviatrix-companion-gateway-v16','canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts','center-for-internet-security-inc:cis-rhel:cis-redhat7-l1-gen1','center-for-internet-security-inc:cis-rhel-7-l2:cis-rhel7-l2','center-for-internet-security-inc:cis-rhel-8-stig:cis-rhel-8-stig','center-for-internet-security-inc:cis-oracle-linux-8-l1:cis-oracle8-l1','center-for-internet-security-inc:cis-ubuntu:cis-ubuntu1804-l1','center-for-internet-security-inc:cis-ubuntu:cis-ubuntulinux2004-l1-gen1','center-for-internet-security-inc:cis-ubuntu-linux-1804-l1:cis-ubuntu1804-l1','center-for-internet-security-inc:cis-ubuntu-linux-2004-l1:cis-ubuntu2004-l1','center-for-internet-security-inc:cis-ubuntu-linux-2204-l1:cis-ubuntu-linux-2204-l1','center-for-internet-security-inc:cis-ubuntu-linux-2204-l1:cis-ubuntu-linux-2204-l1-gen2','cloud-infrastructure-services:dns-ubuntu-2004:dns-ubuntu-2004','cloud-infrastructure-services:squid-ubuntu-2004:squid-ubuntu-2004','cloud-infrastructure-services:load-balancer-nginx:load-balancer-nginx','cloudera:cloudera-centos-os:7_5','cncf-upstream:capi:ubuntu-1804-gen1','cncf-upstream:capi:ubuntu-2004-gen1','cncf-upstream:capi:ubuntu-2204-gen1','credativ:debian:9','credativ:debian:9-backports','debian:debian-10:10','debian:debian-10:10-gen2','debian:debian-10:10-backports','debian:debian-10:10-backports-gen2','debian:debian-10-daily:10','debian:debian-10-daily:10-gen2','debian:debian-10-daily:10-backports','debian:debian-10-daily:10-backports-gen2','debian:debian-11:11','debian:debian-11:11-gen2','debian:debian-11:11-backports','debian:debian-11:11-backports-gen2','debian:debian-11-daily:11','debian:debian-11-daily:11-gen2','debian:debian-11-daily:11-backports','debian:debian-11-daily:11-backports-gen2','erockyenterprisesoftwarefoundationinc1653071250513:rockylinux:free','erockyenterprisesoftwarefoundationinc1653071250513:rockylinux-9:rockylinux-9','github:github-enterprise:github-enterprise','matillion:matillion:matillion-etl-for-snowflake','microsoft-dsvm:aml-workstation:ubuntu','microsoft-dsvm:ubuntu-hpc:1804','microsoft-dsvm:ubuntu-hpc:2004-preview-ndv5','microsoft-dsvm:ubuntu-hpc:2004','microsoft-dsvm:ubuntu-hpc:2204-preview-ndv5','microsoft-dsvm:ubuntu-hpc:2204','microsoft-dsvm:ubuntu-1804:1804-gen2','microsoft-dsvm:ubuntu-2004:2004','microsoft-dsvm:ubuntu-2004:2004-gen2','netapp:netapp-oncommand-cloud-manager:occm-byol','nginxinc:nginx-plus-ent-v1:nginx-plus-ent-centos7','ntegralinc1586961136942:ntg_oracle_8_7:ntg_oracle_8_7','ntegralinc1586961136942:ntg_ubuntu_20_04_lts:ntg_ubuntu_20_04_lts','openlogic:centos-hpc:7.1','openlogic:centos-hpc:7.3','oracle:oracle-linux:8','oracle:oracle-linux:8-ci','oracle:oracle-linux:81','oracle:oracle-linux:81-ci','oracle:oracle-linux:81-gen2','oracle:oracle-linux:ol82','oracle:oracle-linux:ol8_2-gen2','oracle:oracle-linux:ol82-gen2','oracle:oracle-linux:ol83-lvm','oracle:oracle-linux:ol83-lvm-gen2','oracle:oracle-linux:ol84-lvm','oracle:oracle-linux:ol84-lvm-gen2','procomputers:almalinux-8-7:almalinux-8-7','procomputers:rhel-8-2:rhel-8-2','procomputers:rhel-8-8-gen2:rhel-8-8-gen2','procomputers:rhel-8-9-gen2:rhel-8-9-gen2','redhat:rhel:89-gen2','redhat:rhel-byos:rhel-raw76','redhat:rhel-byos:rhel-lvm88','redhat:rhel-byos:rhel-lvm88-gen2','redhat:rhel-byos:rhel-lvm92','redhat:rhel-byos:rhel-lvm-92-gen2','redhat:rhel-ha:9_2','redhat:rhel-ha:9_2-gen2','redhat:rhel-sap-apps:9_0','redhat:rhel-sap-apps:90sapapps-gen2','redhat:rhel-sap-apps:9_2','redhat:rhel-sap-apps:92sapapps-gen2','redhat:rhel-sap-ha:9_2','redhat:rhel-sap-ha:92sapha-gen2','openlogic:centos-ci:7-ci','openlogic:centos-lvm:7-lvm-gen2','oracle:oracle-database:oracle_db_21','oracle:oracle-database-19-3:oracle-database-19-0904','redhat:rhel-sap-ha:90sapha-gen2','suse:sles:12-sp4-gen2','suse:sles-15-sp2-basic:gen2','suse:sles-15-sp2-hpc:gen2','suse:sles-15-sp4-sapcal:gen1','suse:sles-byos:12-sp4','suse:sles-byos:12-sp4-gen2','suse:sles-sap:12-sp4','suse:sles-sap:12-sp4-gen2','suse:sles-sap-byos:12-sp4','suse:sles-sap-byos:12-sp4-gen2','suse:sles-sap-byos:gen2-12-sp4','suse:sles-sapcal:12-sp3','suse:sles-standard:12-sp4-gen2','suse:sles-sap-15-sp2-byos:gen2','talend:talend_re_image:tlnd_re','tenable:tenablecorewas:tenablecoreol8wasbyol','thorntechnologiesllc:sftpgateway:sftpgateway','zscaler:zscaler-private-access:zpa-con-azure') or imageRef matches regex 'almalinux:almalinux:8-gen.*|almalinux:almalinux:9-gen.*|almalinux:almalinux-x86_64:8-gen.*|almalinux:almalinux-x86_64:9-gen.*|canonical:.*:.*|center-for-internet-security-inc:cis-rhel:cis-redhat8-l.*-gen1|center-for-internet-security-inc:cis-rhel:cis-redhat9-l1-gen.*|center-for-internet-security-inc:cis-rhel-8-l.*:cis-rhel8-l.*|center-for-internet-security-inc:cis-rhel9-l1:cis-rhel9-l1.*|center-for-internet-security-inc:cis-ubuntu:cis-ubuntulinux2204-l1-gen.*|microsoftsqlserver:.*:.*|openlogic:centos:7.*|oracle:oracle-database-.*:18..*|oracle:oracle-linux:7.*|openlogic:centos:8.*|oracle:oracle-linux:ol7.*|oracle:oracle-linux:ol8.*|oracle:oracle-linux:ol9.*|redhat:rhel:7.*|redhat:rhel:8.*|redhat:rhel:9.*|redhat:rhel-byos:rhel-lvm7.*|redhat:rhel-byos:rhel-lvm8.*|redhat:rhel-ha:8.*|redhat:rhel-raw:7.*|redhat:rhel-raw:8.*|redhat:rhel-raw:9.*|redhat:rhel-sap:7.*|redhat:rhel-sap-apps:7.*|redhat:rhel-sap-apps:8.*|redhat:rhel-sap-.*:9_0|redhat:rhel-sap-ha:7.*|redhat:rhel-sap-ha:8.*|suse:opensuse-leap-15-.*:gen.*|suse:sles-12-sp5-.*:gen.*|oracle:oracle-linux:ol9-lvm.*|suse:sles-sap-12-sp5.*:gen.*|suse:sles-sap-15-.*:gen.*|suse:sle-hpc-15-sp4:gen.*|suse:sles-15-sp1-sapcal:gen.*|suse:sles-15-sp3-sapcal:gen.*|suse:sles-15-sp4:gen.*|suse:sles-15-sp4-basic:gen.*|suse:sle-hpc-15-sp4-byos:gen.*|suse:sle-hpc-15-sp5-byos:gen.*|suse:sle-hpc-15-sp5:gen.*|suse:sles-15-sp4-byos:gen.*|suse:sles-15-sp4-chost-byos:gen.*|suse:sles-15-sp4-hardened-byos:gen.*|suse:sles-15-sp5-basic:gen.*|suse:sles-15-sp5-byos:gen.*|suse:sles-15-sp5-chost-byos:gen.*|suse:sles-15-sp5-hardened-byos:gen.*|suse:sles-15-sp5-sapcal:gen.*|suse:sles-15-sp5:gen.*|suse:sles-sap-15-sp4-byos:gen.*|suse:sles-sap-15-sp4-hardened-byos:gen.*|suse:sles-sap-15-sp5-byos:gen.*|suse:sles-sap-15-sp5-hardened-byos:gen.*')))\r\n| project id, name, os, type, conf, status, resourceGroup, resourceProperties=properties, isMarketplaceUnsupportedImageUsed)\r\n| union\r\n(resources //union with arc servers, you can play with params as you see fit.\r\n| where type =~ \"microsoft.hybridcompute/machines\"\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n    OS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| extend id=tolower(id)\r\n| extend os=tolower(coalesce(tostring(properties.osName), tostring(properties.osType)))\r\n| where os in~ ('Linux', 'Windows')\r\n| extend status=properties.status\r\n| extend isMarketplaceUnsupportedImageUsed = false\r\n| project id, name, os, type, status,resourceGroup, resourceProperties=properties, isMarketplaceUnsupportedImageUsed,Domain,ConnectionStatus,OSName,Manufacturer,Model))\r\n| join kind=leftouter(\r\n    resources\r\n    | where type in~ (\"Microsoft.SqlVirtualMachine/sqlVirtualMachines\", \"microsoft.azurearcdata/sqlserverinstances\")\r\n    | project resourceId = iff(type =~ \"Microsoft.SqlVirtualMachine/sqlVirtualMachines\", tolower(properties.virtualMachineResourceId), tolower(properties.containerResourceId)), sqlType = type\r\n    | summarize by resourceId, sqlType\r\n) on $left.id == $right.resourceId\r\n| extend type = iff(isnotempty(sqlType), sqlType, type)\r\n| project-away sqlType, resourceId\r\n| where type in~ (\"microsoft.compute/virtualmachines\", \"microsoft.hybridcompute/machines\", \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", \"microsoft.azurearcdata/sqlserverinstances\") // Filtering by resource type\r\n| join kind=leftouter //finally, making a left outer join to fetch updates details from patchassessment\r\n((patchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults\", \"microsoft.hybridcompute/machines/patchassessmentresults\")\r\n| where properties.status =~ \"Succeeded\" or properties.status =~ \"Inprogress\" or (isnotnull(properties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState) and (properties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState =~ \"Unsupported\"))\r\n| parse id with resourceId \"/patchAssessmentResults\" *\r\n| extend resourceId=tolower(resourceId)\r\n| project resourceId, assessProperties=properties))\r\non $left.id == $right.resourceId //join on resources id & patchassessment id that is parsed.\r\n| extend isUnsupported = isMarketplaceUnsupportedImageUsed or (isnotnull(assessProperties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState) and (assessProperties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState =~ \"Unsupported\"))\r\n//Pending Reboot\r\n//| where isnotnull(assessProperties) and assessProperties.rebootPending == \"false\" and not(isUnsupported or assessProperties.status =~ \"inprogress\")\r\n//no Updates data\r\n| where (isnull(assessProperties) == true and not(isUnsupported)) or assessProperties.status =~ \"inprogress\"\r\n| extend AssessmentMode = resourceProperties.osProfile.windowsConfiguration.patchSettings.assessmentMode\r\n| extend PeriodicAssessmentEnabled = case(AssessmentMode==\"AutomaticByPlatform\",\"True\",\"False\")\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n| where name !contains \"f5\" and name !contains \"fw1\" and name !contains \"klbs\" and name !contains \"panorama\" and name !contains \"bigip1\" and name !contains \"nass\" and name !contains \"fmc\"\r\n| where tolower(name) !in (\"dcwu-apis0001\",\"dcwi-aapn001\",\"dcwn-cors001\",\"dcwn-cors002\",\"dcwi-cors001\")\r\n| where os =~ \"windows\"\r\n| where resourceGroup in ({ResourceGroup})\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n| extend OSName = tostring(resourceProperties.osSku)\r\n| project id,Domain,resourceGroup,os,ConnectionStatus,PeriodicAssessmentEnabled",
              "size": 1,
              "title": "No Update Data",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "id",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "21ch"
                    }
                  },
                  {
                    "columnMatch": "resourceGroup",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "20ch"
                    }
                  },
                  {
                    "columnMatch": "OSName",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "42.5714ch"
                    }
                  },
                  {
                    "columnMatch": "status",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "15.5714ch"
                    }
                  },
                  {
                    "columnMatch": "lastassessment",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "21ch"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "id",
                    "label": "Resource"
                  },
                  {
                    "columnId": "resourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "os",
                    "label": "Operating System"
                  },
                  {
                    "columnId": "ConnectionStatus",
                    "label": "Connection Status"
                  },
                  {
                    "columnId": "PeriodicAssessmentEnabled",
                    "label": "Assessment Enabled"
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 0 - Copy - Copy",
            "styleSettings": {
              "showBorder": true
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Updates"
      },
      "name": "UpdatesGroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "parameters": [
                {
                  "id": "db1da5e7-4fa9-465c-b0eb-041c0cfed29f",
                  "version": "KqlParameterItem/1.0",
                  "name": "Severity",
                  "type": 2,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "securityresources\r\n| where type =~ \"microsoft.security/assessments\"\r\n//| extend ResourceType = tostring(properties.resourceDetails.ResourceType)\r\n//| where ResourceType in~ (\"microsoft.hybridcompute/machines\")\r\n| extend Severity = tostring(properties.metadata.severity)\r\n| distinct Severity",
                  "crossComponentResources": [
                    "{Subscription}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "value": [
                    "value::all"
                  ]
                }
              ],
              "style": "pills",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            "name": "parameters - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project ResourceId,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,OS,Manufacturer,Model,AgentVersion\r\n| join\r\n(\r\nsecurityresources\r\n| where type =~ \"microsoft.security/assessments\"\r\n| extend ResourceType = tostring(properties.resourceDetails.ResourceType)\r\n| where ResourceType in~ (\"microsoft.hybridcompute/machines\",\"microsoft.compute/virtualmachines\") // Covers VMs and Arc servers\r\n// Extract recommendation details\r\n| extend \r\n    RecommendationName = tostring(properties.displayName),\r\n    Description = tostring(properties.metadata.description),\r\n    Severity = tostring(properties.metadata.severity),\r\n    AssessmentType = tostring(properties.metadata.assessmentType),\r\n    Threats = tostring(properties.metadata.threats),\r\n    Categories = tostring(properties.metadata.categories),\r\n    ImplementationEffort = tostring(properties.metadata.implementationEffort),\r\n    UserImpact = tostring(properties.metadata.userImpact)\r\n// Extract resource details\r\n| extend \r\n    ResourceId = tolower(tostring(properties.resourceDetails.Id)),\r\n    SubscriptionId = tostring(subscriptionId),\r\n    ResourceGroup = tostring(resourceGroup)\r\n// Extract status details\r\n| extend \r\n    RecommendationState = tostring(properties.status.code)\r\n// Extract policy initiative name from statusPerInitiative array\r\n| mv-expand statusPerInitiative = properties.statusPerInitiative\r\n| extend \r\n    PolicyInitiativeName = tostring(statusPerInitiative.policyInitiativeName),\r\n    PolicyInitiativeId = tostring(statusPerInitiative.policyInitiativeId)\r\n// Filter for actionable recommendations\r\n| where RecommendationState == \"Unhealthy\"\r\n| project\r\n    ResourceId,\r\n    SubscriptionId,\r\n    ResourceGroup,\r\n    RecommendationName,\r\n    Severity,\r\n    Description,\r\n    PolicyInitiativeName\r\n) on ResourceId\r\n| where Severity in ({Severity})\r\n| project RecommendationName,Severity,ResourceId,Domain,resourceGroup,ConnectionStatus,OS//,Description,PolicyInitiativeName\r\n",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "RecommendationName",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "sourceColumn": "Severity",
                          "operator": "==",
                          "thresholdValue": "High",
                          "representation": "4",
                          "text": "{0}{1}"
                        },
                        {
                          "sourceColumn": "Severity",
                          "operator": "==",
                          "thresholdValue": "Medium",
                          "representation": "3",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "warning",
                          "text": "{0}{1}"
                        }
                      ],
                      "customColumnWidthSetting": "77.4286ch"
                    }
                  },
                  {
                    "columnMatch": "ResourceId",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "20.7143ch"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "RecommendationName",
                    "label": "Recommendation"
                  },
                  {
                    "columnId": "ResourceId",
                    "label": "Resource"
                  },
                  {
                    "columnId": "resourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "ConnectionStatus",
                    "label": "Connection Status"
                  }
                ]
              },
              "sortBy": []
            },
            "name": "query - 0"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Defender"
      },
      "name": "DefenderGroup",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "parameters": [
                {
                  "id": "61e31952-e0de-40e9-9076-436142d323e0",
                  "version": "KqlParameterItem/1.0",
                  "name": "Impact",
                  "type": 2,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "AdvisorResources\r\n| where type == 'microsoft.advisor/recommendations'\r\n| project\r\n\t\tCategory = tostring(properties.category),\r\n\t\tImpact = tostring(properties.impact)\r\n| distinct Impact",
                  "crossComponentResources": [
                    "{Subscription}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "value": [
                    "value::all"
                  ]
                },
                {
                  "id": "7ed41fb5-48b6-4f6b-8c84-75598ade17b1",
                  "version": "KqlParameterItem/1.0",
                  "name": "Category",
                  "type": 2,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "AdvisorResources\r\n| where type == 'microsoft.advisor/recommendations'\r\n| where tolower(properties.resourceMetadata.resourceId) contains 'microsoft.hybridcompute/machines'\r\n| project\r\n\t\tCategory = tostring(properties.category),\r\n\t\tImpact = tostring(properties.impact)\r\n| distinct Category",
                  "crossComponentResources": [
                    "{Subscription}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "value": [
                    "value::all"
                  ]
                }
              ],
              "style": "pills",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            "name": "parameters - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project ResourceId,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,OS,Manufacturer,Model,AgentVersion\r\n| join\r\n(\r\nAdvisorResources\r\n| where type == 'microsoft.advisor/recommendations'\r\n| where tolower(properties.resourceMetadata.resourceId) contains 'microsoft.hybridcompute/machines'\r\n| project\r\n\t\tResourceId = tolower(properties.resourceMetadata.resourceId),\r\n        Recommendation = tostring(properties.shortDescription.problem),\r\n\t\tCategory = tostring(properties.category),\r\n\t\tImpact = tostring(properties.impact)\r\n) on ResourceId\r\n| where Impact in ({Impact}) and Category in ({Category})\r\n| project Recommendation, Impact, Category,ResourceId,Domain,resourceGroup,ConnectionStatus,OS",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Recommendation",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "sourceColumn": "Impact",
                          "operator": "==",
                          "thresholdValue": "High",
                          "representation": "4",
                          "text": "{0}{1}"
                        },
                        {
                          "sourceColumn": "Impact",
                          "operator": "==",
                          "thresholdValue": "Medium",
                          "representation": "2",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "info",
                          "text": "{0}{1}"
                        }
                      ],
                      "customColumnWidthSetting": "93ch"
                    }
                  },
                  {
                    "columnMatch": "ResourceId",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "20.4286ch"
                    }
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "ResourceId",
                    "label": "Resource"
                  },
                  {
                    "columnId": "resourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "ConnectionStatus",
                    "label": "Connection Status"
                  }
                ]
              }
            },
            "name": "query - 0"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Advisor"
      },
      "name": "AdvisorGroup",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "parameters": [
                {
                  "id": "49a6f02a-ddbc-4363-bb05-b59c0d887676",
                  "version": "KqlParameterItem/1.0",
                  "name": "PolicyAssignments",
                  "label": "Policy Assignments",
                  "type": 2,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "PolicyResources\r\n| where type == 'microsoft.policyinsights/policystates'\r\n| where tostring(properties.resourceId) contains \"microsoft.hybridcompute/machines\"\r\n| extend ResourceId = tostring(properties.resourceId), policyAssignmentName = tostring(properties.policyAssignmentName), PolicyDefinitionReferenceID = tostring(properties.policyDefinitionReferenceId),ComplianceState = tostring(properties.complianceState)\r\n| project ResourceId,policyAssignmentName,PolicyDefinitionReferenceID,ComplianceState\r\n| join kind=leftouter (\r\npolicyresources\r\n| where type == \"microsoft.authorization/policyassignments\"\r\n| extend name=tostring(name)\r\n| extend PolicyAssignmentDisplayName = tostring(properties.displayName)\r\n| extend policyDefinitionId = tostring(properties.policyDefinitionId)\r\n) on $left.policyAssignmentName == $right.name\r\n| project ResourceId, policyAssignmentName,PolicyAssignmentDisplayName,PolicyDefinitionReferenceID,policyDefinitionId,ComplianceState\r\n| join kind=leftouter (\r\nPolicyResources\r\n| where type in (\"microsoft.authorization/policydefinitions\",\"microsoft.authorization/policysetdefinitions\")\r\n| extend PolicyDisplayName = tostring(properties.displayName)\r\n| project id,PolicyDisplayName\r\n) on $left.policyDefinitionId == $right.id\r\n| extend PolicyReference = case(isempty(PolicyDefinitionReferenceID),PolicyDisplayName,PolicyDefinitionReferenceID)\r\n| distinct policyAssignmentName,PolicyAssignmentDisplayName\r\n| order by PolicyAssignmentDisplayName\r\n",
                  "crossComponentResources": [
                    "{Subscription}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "value": [
                    "value::all"
                  ]
                }
              ],
              "style": "pills",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            "name": "parameters - 1"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "5c0298ce-1ef2-4966-996a-60df747ecc53",
                  "cellValue": "PolicySelectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Overview",
                  "subTarget": "Overview",
                  "style": "link"
                },
                {
                  "id": "0a27c8e8-8b04-476f-a97b-131e76f4ca85",
                  "cellValue": "PolicySelectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Details",
                  "subTarget": "Details",
                  "style": "link"
                }
              ]
            },
            "name": "links - 3"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "parameters": [
                {
                  "id": "5d60cfd2-00c1-4deb-bb05-ad5a3e01482d",
                  "version": "KqlParameterItem/1.0",
                  "name": "Compliance",
                  "type": 2,
                  "isRequired": true,
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "query": "PolicyResources\r\n| where type == 'microsoft.policyinsights/policystates'\r\n| extend ComplianceState = tostring(properties.complianceState)\r\n| distinct ComplianceState",
                  "crossComponentResources": [
                    "{Subscription}"
                  ],
                  "typeSettings": {
                    "additionalResourceOptions": [
                      "value::all"
                    ],
                    "showDefault": false
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "defaultValue": "value::all",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "value": [
                    "NonCompliant"
                  ]
                }
              ],
              "style": "pills",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            "conditionalVisibility": {
              "parameterName": "PolicySelectedTab",
              "comparison": "isEqualTo",
              "value": "Details"
            },
            "name": "parameters - 1 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "policyresources\r\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\r\n| extend complianceState = tostring(properties.complianceState)\r\n| extend\r\n\tResourceId = tolower(tostring(properties.resourceId)),\r\n\tpolicyAssignmentId = tostring(properties.policyAssignmentId),\r\n\tpolicyAssignmentScope = tostring(properties.policyAssignmentScope),\r\n\tpolicyAssignmentName = tostring(properties.policyAssignmentName),\r\n\tpolicyDefinitionId = tostring(properties.policyDefinitionId),\r\n\tpolicyDefinitionReferenceId = tostring(properties.policyDefinitionReferenceId),\r\n\tstateWeight = iff(complianceState == 'NonCompliant', int(300), iff(complianceState == 'Compliant', int(200), iff(complianceState == 'Conflict', int(100), iff(complianceState == 'Exempt', int(50), int(0)))))\r\n| join kind=inner\r\n(\r\nresources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project ResourceId,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,OS,Manufacturer,Model,AgentVersion\r\n) on ResourceId\r\n| summarize max(stateWeight) by ResourceId, policyAssignmentId, policyAssignmentScope, policyAssignmentName\r\n| summarize counts = count() by policyAssignmentId, policyAssignmentScope, max_stateWeight, policyAssignmentName\r\n| summarize overallStateWeight = max(max_stateWeight),\r\nnonCompliantCount = sumif(counts, max_stateWeight == 300),\r\ncompliantCount = sumif(counts, max_stateWeight == 200),\r\nconflictCount = sumif(counts, max_stateWeight == 100),\r\nexemptCount = sumif(counts, max_stateWeight == 50) by policyAssignmentId, policyAssignmentScope, policyAssignmentName\r\n| extend totalResources = todouble(nonCompliantCount + compliantCount + conflictCount + exemptCount)\r\n| extend compliancePercentage = iff(totalResources == 0, todouble(100), 100 * todouble(compliantCount + exemptCount) / totalResources)\r\n| project \r\ncomplianceState = iff(overallStateWeight == 300, 'noncompliant', iff(overallStateWeight == 200, 'compliant', iff(overallStateWeight == 100, 'conflict', iff(overallStateWeight == 50, 'exempt', 'notstarted')))),\r\npolicyAssignmentName, scope = policyAssignmentScope,\r\ncompliancePercentage,\r\ncompliantCount,\r\nnonCompliantCount,\r\nconflictCount,\r\nexemptCount\r\n| where policyAssignmentName in ({PolicyAssignments})\r\n| join kind=leftouter (\r\npolicyresources\r\n| where type == \"microsoft.authorization/policyassignments\"\r\n| extend name=tostring(name)\r\n| extend DisplayName = tostring(properties.displayName)\r\n| project name,DisplayName\r\n) on $left.policyAssignmentName == $right.name\r\n//| project complianceState,DisplayName,scope,compliancePercentage,compliantCount,nonCompliantCount,conflictCount,exemptCount\r\n| project complianceState,DisplayName,scope,compliancePercentage,compliantCount,nonCompliantCount,conflictCount,exemptCount\r\n\r\n",
              "size": 3,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "complianceState",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "compliant",
                          "representation": "success",
                          "text": "[\"DisplayName\"]"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "noncompliant",
                          "representation": "4",
                          "text": "[\"DisplayName\"]"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "unknown",
                          "text": "[\"DisplayName\"]"
                        }
                      ],
                      "customColumnWidthSetting": "47.4286ch"
                    }
                  },
                  {
                    "columnMatch": "DisplayName",
                    "formatter": 5
                  },
                  {
                    "columnMatch": "compliancePercentage",
                    "formatter": 4,
                    "formatOptions": {
                      "min": 0,
                      "max": 100,
                      "palette": "redGreen",
                      "customColumnWidthSetting": "143px"
                    },
                    "numberFormat": {
                      "unit": 1,
                      "options": {
                        "style": "decimal",
                        "maximumFractionDigits": 0
                      }
                    }
                  },
                  {
                    "columnMatch": "policyAssignmentName",
                    "formatter": 5
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "complianceState",
                    "label": "Policy Assignment"
                  },
                  {
                    "columnId": "DisplayName",
                    "label": "DisplayName"
                  },
                  {
                    "columnId": "scope",
                    "label": "Scope"
                  },
                  {
                    "columnId": "compliancePercentage",
                    "label": "Compliance"
                  },
                  {
                    "columnId": "compliantCount",
                    "label": "Compliant"
                  },
                  {
                    "columnId": "nonCompliantCount",
                    "label": "Non-Compliant"
                  },
                  {
                    "columnId": "conflictCount",
                    "label": "Conflict"
                  },
                  {
                    "columnId": "exemptCount",
                    "label": "Exempt"
                  }
                ]
              }
            },
            "conditionalVisibility": {
              "parameterName": "PolicySelectedTab",
              "comparison": "isEqualTo",
              "value": "Overview"
            },
            "name": "query - 4",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "PolicyResources\r\n| where type == 'microsoft.policyinsights/policystates'\r\n| where tostring(properties.resourceId) contains \"microsoft.hybridcompute/machines\"\r\n| extend ResourceId = tostring(properties.resourceId), policyAssignmentName = tostring(properties.policyAssignmentName), PolicyDefinitionReferenceID = tostring(properties.policyDefinitionReferenceId),ComplianceState = tostring(properties.complianceState)\r\n| project ResourceId,policyAssignmentName,PolicyDefinitionReferenceID,ComplianceState\r\n| join kind=leftouter (\r\npolicyresources\r\n| where type == \"microsoft.authorization/policyassignments\"\r\n| extend name=tostring(name)\r\n| extend PolicyAssignmentDisplayName = tostring(properties.displayName)\r\n| extend policyDefinitionId = tostring(properties.policyDefinitionId)\r\n) on $left.policyAssignmentName == $right.name\r\n| project ResourceId, policyAssignmentName,PolicyAssignmentDisplayName,PolicyDefinitionReferenceID,policyDefinitionId,ComplianceState\r\n| where policyAssignmentName in ({PolicyAssignments})\r\n| where ComplianceState in ({Compliance})\r\n| join kind=leftouter (\r\nPolicyResources\r\n| where type in (\"microsoft.authorization/policydefinitions\",\"microsoft.authorization/policysetdefinitions\")\r\n| extend PolicyDisplayName = tostring(properties.displayName)\r\n| project id,PolicyDisplayName\r\n) on $left.policyDefinitionId == $right.id\r\n| extend PolicyReference = case(isempty(PolicyDefinitionReferenceID),PolicyDisplayName,PolicyDefinitionReferenceID)\r\n| project ComplianceState,ResourceId,PolicyAssignmentDisplayName,PolicyReference//,PolicyDefinitionReferenceID,PolicyDisplayName\r\n| join kind = inner\r\n(\r\nresources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project ResourceId,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,OS,Manufacturer,Model,AgentVersion\r\n) on ResourceId\r\n| project ComplianceState,ResourceId,PolicyAssignmentDisplayName,PolicyReference,Domain,resourceGroup,ConnectionStatus,OS",
              "size": 0,
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources",
              "crossComponentResources": [
                "{Subscription}"
              ],
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "ComplianceState",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "NonCompliant",
                          "representation": "4",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  },
                  {
                    "columnMatch": "ResourceId",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "19.2857ch"
                    }
                  },
                  {
                    "columnMatch": "PolicyAssignmentDisplayName",
                    "formatter": 0,
                    "formatOptions": {
                      "customColumnWidthSetting": "62.5714ch"
                    }
                  }
                ],
                "sortBy": [
                  {
                    "itemKey": "PolicyAssignmentDisplayName",
                    "sortOrder": 1
                  }
                ],
                "labelSettings": [
                  {
                    "columnId": "ComplianceState",
                    "label": "Complaint"
                  },
                  {
                    "columnId": "ResourceId",
                    "label": "Resource"
                  },
                  {
                    "columnId": "PolicyAssignmentDisplayName",
                    "label": "Policy Assignment"
                  },
                  {
                    "columnId": "PolicyReference",
                    "label": "Policy Name / Reference"
                  },
                  {
                    "columnId": "resourceGroup",
                    "label": "Resource Group"
                  },
                  {
                    "columnId": "ConnectionStatus",
                    "label": "Connection Status"
                  }
                ]
              },
              "sortBy": [
                {
                  "itemKey": "PolicyAssignmentDisplayName",
                  "sortOrder": 1
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "PolicySelectedTab",
              "comparison": "isEqualTo",
              "value": "Details"
            },
            "name": "query - 0",
            "styleSettings": {
              "showBorder": true
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Policy"
      },
      "name": "PolicyGroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "8958b717-c534-4ede-a3e4-c9751c5abf07",
                  "cellValue": "MonitoringSelectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Configuration",
                  "subTarget": "Configuration",
                  "style": "link"
                },
                {
                  "id": "fa40912f-4f30-4bfa-8843-d2476d382724",
                  "cellValue": "MonitoringSelectedTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Data Collection",
                  "subTarget": "DataCollection",
                  "style": "link"
                }
              ]
            },
            "name": "links - 2"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "parameters": [
                      {
                        "id": "33010f92-3acf-4974-89db-6ffdd222b19b",
                        "version": "KqlParameterItem/1.0",
                        "name": "ConfigurationFilter",
                        "label": "Details Filter",
                        "type": 2,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "typeSettings": {
                          "additionalResourceOptions": [],
                          "showDefault": false
                        },
                        "jsonData": " [\"Show all\", \"Show all machines with issues\", \"Azure Monitor Agent not installed\",\"Dependency Agent not installed\", \"Change Tracking extension not installed\"]",
                        "value": [
                          "Show all"
                        ]
                      }
                    ],
                    "style": "pills",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces"
                  },
                  "name": "parameters - 3 - Copy"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Summary",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "//Azure Arc machines\r\nresources\r\n| where type =~ \"microsoft.hybridcompute/machines\"\r\n| extend PowerStatus = tostring(properties.status),\r\n\tOSType = tostring(properties.osType),\r\n    IdentityType = identity.type,\r\n    ComputerName = tolower(name),\r\n        Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n    | where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| extend ResourceType=\"Azure Arc Machine\"\r\n| project ComputerName, id, location, resourceGroup, PowerStatus, OSType, IdentityType,ResourceType\r\n    //Azure Arc Machines - Installed Extensions\r\n    | join kind = leftouter\r\n    (\r\n    resources\r\n    | where type contains \"microsoft.hybridcompute/machines/extensions\"\r\n    | extend publisher = properties.publisher\r\n        | parse id with * \"/Microsoft.HybridCompute/machines/\" ComputerName \"/\" *\r\n        | extend extensionType = properties.type, \r\n            status = tostring(properties.provisioningState),\r\n            version = properties.typeHandlerVersion,\r\n            ComputerName = tolower(ComputerName)\r\n        | where status in (\"Succeeded\",\"Updating\")\r\n        | summarize InstalledExtensions = make_list(publisher) by ComputerName\r\n    ) on ComputerName\r\n    | extend AMAStatus = case(InstalledExtensions contains \"Microsoft.Azure.Monitor\", \"Installed\", \"Not Installed\")\r\n  //  | extend MDEStatus = case(InstalledExtensions contains \"Microsoft.Azure.AzureDefenderForServers\", \"Installed\", \"Not Installed\")\r\n    | extend CTStatus = case(InstalledExtensions contains \"Microsoft.Azure.ChangeTrackingAndInventory\", \"Installed\", \"Not Installed\")\r\n    | extend MMAStatus = case(InstalledExtensions contains \"Microsoft.EnterpriseCloud.Monitoring\", \"Installed\", \"Not Installed\")\r\n    | extend DAStatus = case(InstalledExtensions contains \"Microsoft.Azure.Monitoring.DependencyAgent\", \"Installed\", \"Not Installed\")\r\n| extend OSType = case(OSType=~\"windows\",\"Windows\",(case(OSType=~\"linux\",\"Linux\",OSType)))\r\n| project ComputerName, ResourceID = tolower(id),ResourceType,location, resourceGroup, OSType, Status=PowerStatus,AMAStatus,MMAStatus, CTStatus,DAStatus\r\n| extend ResourceType_OS=strcat(OSType,\" \",ResourceType)\r\n| project ResourceID,resourceGroup,location,ResourceType,ResourceType_OS,OSType,Status,AMAStatus,CTStatus,DAStatus\r\n| summarize Count=count(),Online=count(Status in (\"VM running\",\"Connected\",\"\")),AMAStatus=count(AMAStatus == \"Installed\"),CTStatus=count(CTStatus == \"Installed\"),DAStatus=count(DAStatus==\"Installed\") by ResourceType_OS\r\n",
                          "size": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Count",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Online",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "1",
                                      "text": "{0}{1} / [\"Count\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "AMAStatus",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Count\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Count\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Count\"]"
                                    }
                                  ],
                                  "customColumnWidthSetting": "26.8571ch"
                                }
                              },
                              {
                                "columnMatch": "CTStatus",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Count\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Count\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Count\"]"
                                    }
                                  ],
                                  "customColumnWidthSetting": "30ch"
                                }
                              },
                              {
                                "columnMatch": "DAStatus",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Linux",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Count\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Count\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Count\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "MDEStatus",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Scale Set",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Count\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Count\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Count\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "UpdateSchedule",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Scale Set",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Linux",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Count\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Count\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Count\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "UpdateAssessment",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Scale Set",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Linux",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Count\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Count\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Count\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "UpdatedRecently",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Scale Set",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Linux",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Count\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Count\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Count\"]"
                                    }
                                  ]
                                }
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "ResourceType_OS",
                                "label": "Resource Type"
                              },
                              {
                                "columnId": "Online",
                                "label": "Connected"
                              },
                              {
                                "columnId": "AMAStatus",
                                "label": "Azure Monitor Agent"
                              },
                              {
                                "columnId": "CTStatus",
                                "label": "Change Tracking Extension"
                              },
                              {
                                "columnId": "DAStatus",
                                "label": "Dependency Agent"
                              }
                            ]
                          },
                          "sortBy": []
                        },
                        "name": "query - 3 - Copy"
                      }
                    ]
                  },
                  "customWidth": "75",
                  "name": "OverviewGroup",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Details",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "//Azure Arc machines\r\nresources\r\n| where type =~ \"microsoft.hybridcompute/machines\"\r\n| extend PowerStatus = tostring(properties.status),\r\n\tOSType = tostring(properties.osType),\r\n    IdentityType = identity.type,\r\n    ComputerName = tolower(name),\r\n        Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n    | where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| extend ResourceType=\"Azure Arc Machine\"\r\n| project ComputerName, id, location, resourceGroup, PowerStatus, OSType, IdentityType,ResourceType,Domain\r\n    //Azure Arc Machines - Installed Extensions\r\n    | join kind = leftouter\r\n    (\r\n    resources\r\n    | where type contains \"microsoft.hybridcompute/machines/extensions\"\r\n    | extend publisher = properties.publisher\r\n        | parse id with * \"/Microsoft.HybridCompute/machines/\" ComputerName \"/\" *\r\n        | extend extensionType = properties.type, \r\n            status = tostring(properties.provisioningState),\r\n            version = properties.typeHandlerVersion,\r\n            ComputerName = tolower(ComputerName)\r\n        | where status in (\"Succeeded\",\"Updating\")\r\n        | summarize InstalledExtensions = make_list(publisher) by ComputerName\r\n    ) on ComputerName\r\n    | extend AMAStatus = case(InstalledExtensions contains \"Microsoft.Azure.Monitor\", \"Installed\", \"Not Installed\")\r\n  //  | extend MDEStatus = case(InstalledExtensions contains \"Microsoft.Azure.AzureDefenderForServers\", \"Installed\", \"Not Installed\")\r\n    | extend CTStatus = case(InstalledExtensions contains \"Microsoft.Azure.ChangeTrackingAndInventory\", \"Installed\", \"Not Installed\")\r\n    | extend MMAStatus = case(InstalledExtensions contains \"Microsoft.EnterpriseCloud.Monitoring\", \"Installed\", \"Not Installed\")\r\n    | extend DAStatus = case(InstalledExtensions contains \"Microsoft.Azure.Monitoring.DependencyAgent\", \"Installed\", \"Not Installed\")\r\n| extend OSType = case(OSType=~\"windows\",\"Windows\",(case(OSType=~\"linux\",\"Linux\",OSType)))\r\n| project ComputerName, ResourceID = tolower(id),ResourceType,location,Domain, resourceGroup, OSType, Status=PowerStatus,AMAStatus,MMAStatus, CTStatus,DAStatus\r\n| extend ResourceType_OS=strcat(OSType,\" \",ResourceType)\r\n//| project ResourceID,resourceGroup,location,ResourceType,ResourceType_OS,OSType,Status,AMAStatus,DAStatus,CTStatus\r\n//| project ResourceID,resourceGroup,location,ResourceType_OS,Status,AMAStatus,CTStatus,DAStatus\r\n//only show problems\r\n| where \"Show all\" in ({ConfigurationFilter}) \r\nor (\"Show all machines with issues\" in ({ConfigurationFilter}) and (AMAStatus !=\"Installed\" or CTStatus!=\"Installed\" or DAStatus!in(\"Installed\",\"n/a\"))) \r\nor (\"Azure Monitor Agent not installed\" in ({ConfigurationFilter}) and AMAStatus !=\"Installed\") \r\nor (\"Dependency Agent not installed\" in ({ConfigurationFilter}) and DAStatus!in(\"Installed\",\"n/a\"))\r\nor (\"Change Tracking extension not installed\" in ({ConfigurationFilter}) and CTStatus!=\"Installed\")\r\n| project ResourceID,OSType, Domain, resourceGroup, Status,AMAStatus,CTStatus,DAStatus",
                          "size": 0,
                          "showExportToExcel": true,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "ResourceID",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "21ch"
                                }
                              },
                              {
                                "columnMatch": "OSType",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "22ch"
                                }
                              },
                              {
                                "columnMatch": "Domain",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "15ch"
                                }
                              },
                              {
                                "columnMatch": "resourceGroup",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "22.5714ch"
                                }
                              },
                              {
                                "columnMatch": "Status",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "23.1429ch"
                                }
                              },
                              {
                                "columnMatch": "AMAStatus",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "!=",
                                      "thresholdValue": "Installed",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "23.9986ch"
                                }
                              },
                              {
                                "columnMatch": "CTStatus",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "!=",
                                      "thresholdValue": "Installed",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "19.8557ch"
                                }
                              },
                              {
                                "columnMatch": "DAStatus",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "n/a",
                                      "representation": "more",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "!=",
                                      "thresholdValue": "Installed",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "22ch"
                                }
                              },
                              {
                                "columnMatch": "location",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "16.1409ch"
                                }
                              },
                              {
                                "columnMatch": "ResourceType_OS",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "21.2847ch"
                                }
                              },
                              {
                                "columnMatch": "MDEStatus",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "n/a",
                                      "representation": "more",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "!=",
                                      "thresholdValue": "Installed",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "19ch"
                                }
                              },
                              {
                                "columnMatch": "assessmentMode",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "n/a",
                                      "representation": "more",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "!=",
                                      "thresholdValue": "AutomaticByPlatform",
                                      "representation": "4",
                                      "text": "No"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "Yes"
                                    }
                                  ],
                                  "customColumnWidthSetting": "22.1429ch"
                                }
                              },
                              {
                                "columnMatch": "patchMode",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "n/a",
                                      "representation": "more",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "!=",
                                      "thresholdValue": "Customer Managed Schedules",
                                      "representation": "4",
                                      "text": "No"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "Yes"
                                    }
                                  ],
                                  "customColumnWidthSetting": "22.5704ch"
                                }
                              },
                              {
                                "columnMatch": "UpdatedRecently",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "n/a",
                                      "representation": "more",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "!=",
                                      "thresholdValue": "Yes",
                                      "representation": "4",
                                      "text": "No"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "22ch"
                                }
                              }
                            ],
                            "filter": true,
                            "labelSettings": [
                              {
                                "columnId": "ResourceID",
                                "label": "Resource"
                              },
                              {
                                "columnId": "OSType",
                                "label": "Operating System"
                              },
                              {
                                "columnId": "resourceGroup",
                                "label": "Resource Group"
                              },
                              {
                                "columnId": "Status",
                                "label": "Connection Status"
                              },
                              {
                                "columnId": "AMAStatus",
                                "label": "Azure Monitor Agent"
                              },
                              {
                                "columnId": "CTStatus",
                                "label": "Change Tracking"
                              },
                              {
                                "columnId": "DAStatus",
                                "label": "Dependency Agent"
                              }
                            ]
                          },
                          "sortBy": []
                        },
                        "name": "query - 3 - Copy"
                      }
                    ]
                  },
                  "name": "DetailsGroup",
                  "styleSettings": {
                    "showBorder": true
                  }
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "MonitoringSelectedTab",
              "comparison": "isEqualTo",
              "value": "Configuration"
            },
            "name": "ConfigurationGroup"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 9,
                  "content": {
                    "version": "KqlParameterItem/1.0",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "parameters": [
                      {
                        "id": "e3495651-66ef-44cd-829f-f6e2d91482fe",
                        "version": "KqlParameterItem/1.0",
                        "name": "workspace",
                        "label": "Log Analytics Workspace",
                        "type": 5,
                        "isRequired": true,
                        "query": "resources\r\n| where type =~ 'microsoft.operationalinsights/workspaces'\r\n| project value = id, label = name",
                        "crossComponentResources": [
                          "value::all"
                        ],
                        "typeSettings": {
                          "additionalResourceOptions": [],
                          "showDefault": false
                        },
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources",
                        "value": "/subscriptions/c3dd6520-e863-4335-9093-1d31841f9ef4/resourceGroups/AzMon-RG/providers/Microsoft.OperationalInsights/workspaces/LAW-Main"
                      },
                      {
                        "id": "5b0a7c50-4eeb-4426-a9f1-513a04d946ec",
                        "version": "KqlParameterItem/1.0",
                        "name": "DataCollectionFilter",
                        "label": "Details Filter",
                        "type": 2,
                        "isRequired": true,
                        "multiSelect": true,
                        "quote": "'",
                        "delimiter": ",",
                        "typeSettings": {
                          "additionalResourceOptions": [],
                          "showDefault": false
                        },
                        "jsonData": " [\"Show all\", \"Show all machines with issues\", \"No Heartbeat\",\"No VM Insights Data\", \"No Change Tracking Data\", \"No Syslog Data\", \"No Security Events (Sentinel)\"]",
                        "value": [
                          "Show all"
                        ]
                      },
                      {
                        "id": "f2487fb2-6545-4165-9e4a-1eb9de854651",
                        "version": "KqlParameterItem/1.0",
                        "name": "ARGQuery",
                        "type": 1,
                        "query": "//Azure Arc machines\r\nresources\r\n| where type =~ \"microsoft.hybridcompute/machines\"\r\n| extend PowerStatus = tostring(properties.status),\r\n\tOSType = tostring(properties.osType),\r\n    IdentityType = identity.type,\r\n    ComputerName = tolower(name),\r\n        Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n    | where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| extend ResourceType=\"Azure Arc Machine\"\r\n| project ComputerName, id, location, resourceGroup, PowerStatus, OSType, IdentityType,ResourceType,Domain\r\n    //Azure Arc Machines - Installed Extensions\r\n    | join kind = leftouter\r\n    (\r\n    resources\r\n    | where type contains \"microsoft.hybridcompute/machines/extensions\"\r\n    | extend publisher = properties.publisher\r\n        | parse id with * \"/Microsoft.HybridCompute/machines/\" ComputerName \"/\" *\r\n        | extend extensionType = properties.type, \r\n            status = tostring(properties.provisioningState),\r\n            version = properties.typeHandlerVersion,\r\n            ComputerName = tolower(ComputerName)\r\n        | where status in (\"Succeeded\",\"Updating\")\r\n        | summarize InstalledExtensions = make_list(publisher) by ComputerName\r\n    ) on ComputerName\r\n    | extend AMAStatus = case(InstalledExtensions contains \"Microsoft.Azure.Monitor\", \"Installed\", \"Not Installed\")\r\n  //  | extend MDEStatus = case(InstalledExtensions contains \"Microsoft.Azure.AzureDefenderForServers\", \"Installed\", \"Not Installed\")\r\n    | extend CTStatus = case(InstalledExtensions contains \"Microsoft.Azure.ChangeTrackingAndInventory\", \"Installed\", \"Not Installed\")\r\n    | extend MMAStatus = case(InstalledExtensions contains \"Microsoft.EnterpriseCloud.Monitoring\", \"Installed\", \"Not Installed\")\r\n    | extend DAStatus = case(InstalledExtensions contains \"Microsoft.Azure.Monitoring.DependencyAgent\", \"Installed\", \"Not Installed\")\r\n| extend OSType = case(OSType=~\"windows\",\"Windows\",(case(OSType=~\"linux\",\"Linux\",OSType)))\r\n| project ComputerName, ResourceID = tolower(id),ResourceType,location, resourceGroup, OSType, Status=PowerStatus,AMAStatus,MMAStatus, CTStatus,DAStatus,Domain\r\n| extend ResourceType_OS=strcat(OSType,\" \",ResourceType)\r\n| extend bag = pack(\"ResourceID\",ResourceID,\"ResourceType\",ResourceType,\"ResourceType_OS\",ResourceType_OS,\"location\",location,\"resourceGroup\",resourceGroup,\"OSType\",OSType,\"Status\",Status,\"AMAStatus\",AMAStatus,\"MMAStatus\",MMAStatus,\"CTStatus\",CTStatus,\"DAStatus\",DAStatus,\"Domain\",Domain)\r\n| summarize tostring(make_list(bag))",
                        "crossComponentResources": [
                          "{Subscription}"
                        ],
                        "isHiddenWhenLocked": true,
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources"
                      }
                    ],
                    "style": "pills",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources"
                  },
                  "name": "parameters - 3"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Summary",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let arg = materialize(datatable(row:string) ['{ARGQuery}']\r\n| project row = todynamic(row)\r\n| mv-expand row\r\n| evaluate bag_unpack(row));\r\narg\r\n| project ResourceID,resourceGroup,location,ResourceType,ResourceType_OS,OSType,Status,AMAStatus,CTStatus\r\n| join kind=leftouter\r\n(\r\n//AMA Heartbeat\r\nHeartbeat\r\n| where TimeGenerated >ago(30d)\r\n| where Category == \"Azure Monitor Agent\"\r\n| where ResourceType =~ \"virtualMachines\" or ResourceType =~ \"virtualMachineScaleSets\" or ResourceType =~ \"machines\"\r\n| summarize LastAMAHeartbeat = arg_max(TimeGenerated,ResourceId,OSType,ResourceType,ResourceGroup,SubscriptionId) by Computer//ResourceId, Computer,OSType\r\n| extend ResourceId = tolower(ResourceId)\r\n| extend ResourceId = case(ResourceType =~ \"virtualMachineScaleSets\", split(ResourceId,\"/virtualmachines/\")[0],ResourceId)\r\n| extend Computer=case(ResourceType=~\"virtualmachinescalesets\",split(ResourceId,\"/\")[8],Computer)\r\n| summarize LastAMAHeartbeat = arg_max(LastAMAHeartbeat,ResourceId,OSType,ResourceType,ResourceGroup,SubscriptionId) by Computer//ResourceId, Computer,OSType\r\n| extend ResourceType=tolower(ResourceType)\r\n| extend ResourceGroup = toupper(ResourceGroup)\r\n| extend Computer = toupper(Computer) \r\n| extend Computer=tostring(split(Computer,\".\")[0])\r\n| extend TimeFromNow = now() - LastAMAHeartbeat\r\n| extend AMAHeartbeat = toint(TimeFromNow / 1s)\r\n| join kind=leftouter\r\n//VMInsights\r\n(\r\nInsightsMetrics\r\n| where TimeGenerated > ago(2d)\r\n| where Origin == \"vm.azm.ms\"\r\n| where Name != \"Heartbeat\"\r\n| summarize LastVMICollection = arg_max(TimeGenerated,*) by _ResourceId\r\n| extend _ResourceId = case(tolower(_ResourceId) contains \"virtualMachineScaleSets\", split(_ResourceId,\"/virtualmachines/\")[0],_ResourceId)\r\n| extend Computer=case(tolower(_ResourceId) contains \"virtualmachinescalesets\",split(_ResourceId,\"/\")[8],Computer)\r\n| summarize LastVMICollection = max(LastVMICollection) by _ResourceId\r\n| extend TimeFromNow = now() - LastVMICollection\r\n| extend VMICollection = toint(TimeFromNow / 1s)\r\n| extend ResourceId = tolower(_ResourceId)\r\n) on ResourceId\r\n| join kind=leftouter\r\n//Syslog\r\n(\r\nSyslog\r\n| where TimeGenerated > ago(2d)\r\n| summarize LastSyslogCollection = max(TimeGenerated) by Computer,_ResourceId\r\n//get Computer name from resource ID since it could be forwarding for another computer\r\n| extend RID_split = split(_ResourceId,\"/\")\r\n| extend Computer=tostring(RID_split[8])\r\n| extend _ResourceId = case(tolower(_ResourceId) contains \"virtualMachineScaleSets\", split(_ResourceId,\"/virtualmachines/\")[0],_ResourceId)\r\n//| extend Computer=case(tolower(_ResourceId) contains \"virtualmachinescalesets\",split(_ResourceId,\"/\")[8],Computer)\r\n| summarize LastSyslogCollection = max(LastSyslogCollection) by Computer,_ResourceId\r\n| extend TimeFromNow = now() - LastSyslogCollection\r\n| extend SyslogCollection = toint(TimeFromNow / 1s)\r\n| extend Computer = toupper(Computer)\r\n| extend Computer=tostring(split(Computer,\".\")[0])\r\n| extend ResourceId = tolower(_ResourceId)\r\n) on ResourceId\r\n//Sentinel Data\r\n| join kind=leftouter \r\n(\r\nSecurityEvent\r\n| where TimeGenerated > ago(2d)\r\n| summarize LastSecurityEventCollection = max(TimeGenerated) by Computer,_ResourceId\r\n| extend _ResourceId = case(tolower(_ResourceId) contains \"virtualMachineScaleSets\", split(_ResourceId,\"/virtualmachines/\")[0],_ResourceId)\r\n| extend Computer=case(tolower(_ResourceId) contains \"virtualmachinescalesets\",split(_ResourceId,\"/\")[8],Computer)\r\n| summarize LastSecurityEventCollection = max(LastSecurityEventCollection) by Computer,_ResourceId\r\n| extend ResourceId = tolower(_ResourceId)\r\n| extend Computer = toupper(Computer)\r\n| extend Computer=tostring(split(Computer,\".\")[0])\r\n| extend TimeFromNow = now() - LastSecurityEventCollection\r\n| extend SecurityEventCollection = toint(TimeFromNow / 1s)\r\n) on ResourceId\r\n//Change Tracking data\r\n| join kind=leftouter\r\n(\r\nConfigurationData\r\n| where TimeGenerated > ago(2d)\r\n| summarize LastChangeTrackingEvent = max(TimeGenerated) by Computer,_ResourceId\r\n| extend _ResourceId = case(tolower(_ResourceId) contains \"virtualMachineScaleSets\", split(_ResourceId,\"/virtualmachines/\")[0],_ResourceId)\r\n| extend Computer=case(tolower(_ResourceId) contains \"virtualmachinescalesets\",split(_ResourceId,\"/\")[8],Computer)\r\n| summarize LastChangeTrackingEvent = max(LastChangeTrackingEvent) by Computer,_ResourceId\r\n| extend ResourceId = tolower(_ResourceId)\r\n| extend Computer = toupper(Computer)\r\n| extend Computer=tostring(split(Computer,\".\")[0])\r\n| extend TimeFromNow = now() - LastChangeTrackingEvent\r\n| extend ChangeTrackingEventCollection = toint(TimeFromNow / 1s)\r\n) on ResourceId\r\n//Put it all together\r\n| extend AMAState = case (LastAMAHeartbeat>ago(5m),\"Connected\",\"Not Connected\")\r\n| extend VMInsightsState = case (LastVMICollection>ago(5m),\"Connected\",\"Not Connected\")\r\n| extend SyslogState = case (LastSyslogCollection>ago(30m) and (OSType==\"Linux\"),\"Connected\",\"Not Connected\")\r\n| extend SyslogState = case (OSType==\"Windows\",\"n/a\",SyslogState)\r\n| extend SyslogCollection = case (OSType==\"Windows\",-222,isempty(SyslogCollection),-1, SyslogCollection)\r\n| extend SecurityEventState = case (LastSecurityEventCollection>ago(10m) and (OSType==\"Windows\"),\"Connected\",\"Not Connected\")\r\n| extend SecurityEventState = case (OSType==\"Linux\",\"n/a\",SecurityEventState)\r\n| extend ChangeTrackingState = case (LastChangeTrackingEvent>ago(1d),\"Connected\",\"Not Connected\")\r\n| project Computer,ResourceType,OSType,SubscriptionId,ResourceGroup,ResourceId,AMAState,VMInsightsState,SyslogState,SecurityEventState,ChangeTrackingState,AMAHeartbeat,VMICollection,SyslogCollection,SecurityEventCollection,ChangeTrackingEventCollection\r\n| extend ResourceType = case(ResourceType==\"virtualmachines\",\"Virtual Machine\",ResourceType==\"virtualmachinescalesets\",\"VM Scale Set\",ResourceType=='machines',\"Azure Arc Machine\",ResourceType)\r\n| extend ResourceGroup=tolower(ResourceGroup)\r\n)\r\non $left.ResourceID == $right.ResourceId\r\n| summarize Count=count(),Online=count(Status in (\"VM running\",\"Connected\",\"\")),AMAConnectedCount=count(AMAState == \"Connected\"),VMInsightsConnectedCount=count(VMInsightsState==\"Connected\"), ChangeTrackingConnectedCount=count(ChangeTrackingState==\"Connected\"),SecurityEventConnectedCount=count(SecurityEventState==\"Connected\"), SyslogConnectedCount=count(SyslogState==\"Connected\") by ResourceType_OS\r\n",
                          "size": 3,
                          "timeContext": {
                            "durationMs": 86400000
                          },
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "Count",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "Online",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "AMAConnectedCount",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Online\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Online\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Online\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "VMInsightsConnectedCount",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Online\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Online\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Online\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "ChangeTrackingConnectedCount",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Online\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Online\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Online\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "SecurityEventConnectedCount",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Linux",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Online\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Online\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Online\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "SyslogConnectedCount",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Windows",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Online\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Online\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Online\"]"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "MDConnectedCount",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Scale Set",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "<",
                                      "thresholdValue": "[\"Online\"]",
                                      "representation": "4",
                                      "text": "{0}{1} / [\"Online\"]"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1} / [\"Online\"]"
                                    }
                                  ]
                                }
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "ResourceType_OS",
                                "label": "Resource Type"
                              },
                              {
                                "columnId": "AMAConnectedCount",
                                "label": "Heartbeat"
                              },
                              {
                                "columnId": "VMInsightsConnectedCount",
                                "label": "VM Insights"
                              },
                              {
                                "columnId": "ChangeTrackingConnectedCount",
                                "label": "Change Tracking"
                              },
                              {
                                "columnId": "SecurityEventConnectedCount",
                                "label": "Sentinel"
                              },
                              {
                                "columnId": "SyslogConnectedCount",
                                "label": "Syslog"
                              }
                            ]
                          },
                          "sortBy": []
                        },
                        "name": "query - 3"
                      }
                    ]
                  },
                  "customWidth": "75",
                  "name": "OverviewGroup",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Details",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "let arg = materialize(datatable(row:string) ['{ARGQuery}']\r\n| project row = todynamic(row)\r\n| mv-expand row\r\n| evaluate bag_unpack(row));\r\narg\r\n| project ResourceID,resourceGroup,location,Domain,ResourceType,ResourceType_OS,OSType,Status,AMAStatus,DAStatus,CTStatus\r\n| join kind=leftouter\r\n(\r\n//AMA Heartbeat\r\nHeartbeat\r\n| where TimeGenerated >ago(30d)\r\n| where Category == \"Azure Monitor Agent\"\r\n| where ResourceType =~ \"virtualMachines\" or ResourceType =~ \"virtualMachineScaleSets\" or ResourceType =~ \"machines\"\r\n| summarize LastAMAHeartbeat = arg_max(TimeGenerated,ResourceId,OSType,ResourceType,ResourceGroup,SubscriptionId) by Computer//ResourceId, Computer,OSType\r\n| extend ResourceId = tolower(ResourceId)\r\n| extend ResourceId = case(ResourceType =~ \"virtualMachineScaleSets\", split(ResourceId,\"/virtualmachines/\")[0],ResourceId)\r\n| extend Computer=case(ResourceType=~\"virtualmachinescalesets\",split(ResourceId,\"/\")[8],Computer)\r\n| summarize LastAMAHeartbeat = arg_max(LastAMAHeartbeat,ResourceId,OSType,ResourceType,ResourceGroup,SubscriptionId) by Computer//ResourceId, Computer,OSType\r\n| extend ResourceType=tolower(ResourceType)\r\n| extend ResourceGroup = toupper(ResourceGroup)\r\n| extend Computer = toupper(Computer) \r\n| extend Computer=tostring(split(Computer,\".\")[0])\r\n| extend TimeFromNow = now() - LastAMAHeartbeat\r\n| extend AMAHeartbeat = toint(TimeFromNow / 1s)\r\n| join kind=leftouter\r\n//VMInsights\r\n(\r\nInsightsMetrics\r\n| where TimeGenerated > ago(2d)\r\n| where Origin == \"vm.azm.ms\"\r\n| where Name != \"Heartbeat\"\r\n| summarize LastVMICollection = arg_max(TimeGenerated,*) by _ResourceId\r\n| extend _ResourceId = case(tolower(_ResourceId) contains \"virtualMachineScaleSets\", split(_ResourceId,\"/virtualmachines/\")[0],_ResourceId)\r\n| extend Computer=case(tolower(_ResourceId) contains \"virtualmachinescalesets\",split(_ResourceId,\"/\")[8],Computer)\r\n| summarize LastVMICollection = max(LastVMICollection) by _ResourceId\r\n| extend TimeFromNow = now() - LastVMICollection\r\n| extend VMICollection = toint(TimeFromNow / 1s)\r\n| extend ResourceId = tolower(_ResourceId)\r\n) on ResourceId\r\n| join kind=leftouter\r\n//Syslog\r\n(\r\nSyslog\r\n| where TimeGenerated > ago(2d)\r\n| summarize LastSyslogCollection = max(TimeGenerated) by Computer,_ResourceId\r\n//get Computer name from resource ID since it could be forwarding for another computer\r\n| extend RID_split = split(_ResourceId,\"/\")\r\n| extend Computer=tostring(RID_split[8])\r\n| extend _ResourceId = case(tolower(_ResourceId) contains \"virtualMachineScaleSets\", split(_ResourceId,\"/virtualmachines/\")[0],_ResourceId)\r\n//| extend Computer=case(tolower(_ResourceId) contains \"virtualmachinescalesets\",split(_ResourceId,\"/\")[8],Computer)\r\n| summarize LastSyslogCollection = max(LastSyslogCollection) by Computer,_ResourceId\r\n| extend TimeFromNow = now() - LastSyslogCollection\r\n| extend SyslogCollection = toint(TimeFromNow / 1s)\r\n| extend Computer = toupper(Computer)\r\n| extend Computer=tostring(split(Computer,\".\")[0])\r\n| extend ResourceId = tolower(_ResourceId)\r\n) on ResourceId\r\n//Sentinel Data\r\n| join kind=leftouter \r\n(\r\nSecurityEvent\r\n| where TimeGenerated > ago(2d)\r\n| summarize LastSecurityEventCollection = max(TimeGenerated) by Computer,_ResourceId\r\n| extend _ResourceId = case(tolower(_ResourceId) contains \"virtualMachineScaleSets\", split(_ResourceId,\"/virtualmachines/\")[0],_ResourceId)\r\n| extend Computer=case(tolower(_ResourceId) contains \"virtualmachinescalesets\",split(_ResourceId,\"/\")[8],Computer)\r\n| summarize LastSecurityEventCollection = max(LastSecurityEventCollection) by Computer,_ResourceId\r\n| extend ResourceId = tolower(_ResourceId)\r\n| extend Computer = toupper(Computer)\r\n| extend Computer=tostring(split(Computer,\".\")[0])\r\n| extend TimeFromNow = now() - LastSecurityEventCollection\r\n| extend SecurityEventCollection = toint(TimeFromNow / 1s)\r\n) on ResourceId\r\n//Change Tracking data\r\n| join kind=leftouter\r\n(\r\nConfigurationData\r\n| where TimeGenerated > ago(2d)\r\n| summarize LastChangeTrackingEvent = max(TimeGenerated) by Computer,_ResourceId\r\n| extend _ResourceId = case(tolower(_ResourceId) contains \"virtualMachineScaleSets\", split(_ResourceId,\"/virtualmachines/\")[0],_ResourceId)\r\n| extend Computer=case(tolower(_ResourceId) contains \"virtualmachinescalesets\",split(_ResourceId,\"/\")[8],Computer)\r\n| summarize LastChangeTrackingEvent = max(LastChangeTrackingEvent) by Computer,_ResourceId\r\n| extend ResourceId = tolower(_ResourceId)\r\n| extend Computer = toupper(Computer)\r\n| extend Computer=tostring(split(Computer,\".\")[0])\r\n| extend TimeFromNow = now() - LastChangeTrackingEvent\r\n| extend ChangeTrackingEventCollection = toint(TimeFromNow / 1s)\r\n) on ResourceId\r\n//Put it all together\r\n| extend AMAState = case (LastAMAHeartbeat>ago(5m),\"Connected\",\"Not Connected\")\r\n| extend AMAState = case (AMAState!=\"Connected\",\"Not Connected\",AMAState)\r\n| extend VMInsightsState = case (LastVMICollection>ago(5m),\"Connected\",\"Not Connected\")\r\n| extend SyslogState = case (LastSyslogCollection>ago(30m) and (OSType==\"Linux\"),\"Connected\",\"Not Connected\")\r\n| extend SyslogState = case (OSType==\"Windows\",\"n/a\",SyslogState)\r\n| extend SyslogCollection = case (OSType==\"Windows\",-222,isempty(SyslogCollection),-1, SyslogCollection)\r\n| extend SecurityEventState = case (LastSecurityEventCollection>ago(10m) and (OSType==\"Windows\"),\"Connected\",\"Not Connected\")\r\n| extend SecurityEventState = case (OSType==\"Linux\",\"n/a\",SecurityEventState)\r\n| extend ChangeTrackingState = case (LastChangeTrackingEvent>ago(1d),\"Connected\",\"Not Connected\")\r\n| project Computer,ResourceType,OSType,SubscriptionId,ResourceGroup,ResourceId,AMAState,VMInsightsState,SyslogState,SecurityEventState,ChangeTrackingState,AMAHeartbeat,VMICollection,SyslogCollection,SecurityEventCollection,ChangeTrackingEventCollection\r\n| extend ResourceType = case(ResourceType==\"virtualmachines\",\"Virtual Machine\",ResourceType==\"virtualmachinescalesets\",\"VM Scale Set\",ResourceType=='machines',\"Azure Arc Machine\",ResourceType)\r\n| extend ResourceGroup=tolower(ResourceGroup)\r\n)\r\non $left.ResourceID == $right.ResourceId\r\n| extend AMAState = case (isempty(AMAState),\"Not Connected\",AMAState)\r\n| extend VMInsightsState = case (isempty(VMInsightsState),\"Not Connected\",VMInsightsState)\r\n| extend ChangeTrackingState = case (isempty(ChangeTrackingState),\"Not Connected\",ChangeTrackingState)\r\n| extend SyslogState = case (isempty(SyslogState),\"Not Connected\",SyslogState)\r\n| extend SyslogState = case (OSType==\"Windows\",\"n/a\",SyslogState)\r\n| extend SecurityEventState = case (isempty(SecurityEventState),\"Not Connected\",SecurityEventState)\r\n| extend SecurityEventState = case (OSType==\"Linux\",\"n/a\",SecurityEventState)\r\n| where \"Show all\" in ({DataCollectionFilter}) \r\nor (\"Show all machines with issues\" in ({DataCollectionFilter}) and (AMAState ==\"Not Connected\" or VMInsightsState==\"Not Connected\" or SyslogState==\"Not Connected\" or SecurityEventState==\"Not Connected\" or ChangeTrackingState == \"Not Connected\")) \r\nor (\"No Heartbeat\" in ({DataCollectionFilter}) and AMAState == \"Not Connected\") \r\nor (\"No VM Insights Data\" in ({DataCollectionFilter}) and VMInsightsState == \"Not Connected\")\r\nor (\"No Change Tracking Data\" in ({DataCollectionFilter}) and ChangeTrackingState == \"Not Connected\")\r\nor (\"No Syslog Data\" in ({DataCollectionFilter}) and SyslogState == \"Not Connected\")\r\nor (\"No Security Events (Sentinel)\" in ({DataCollectionFilter}) and SecurityEventState == \"Not Connected\")\r\n| project ResourceID,OSType,Domain,resourceGroup,Status,AMAHeartbeat,VMICollection,ChangeTrackingEventCollection,SecurityEventCollection,SyslogCollection,AMAState,VMInsightsState,ChangeTrackingState,SyslogState,SecurityEventState\r\n\r\n",
                          "size": 0,
                          "showExportToExcel": true,
                          "queryType": 0,
                          "resourceType": "microsoft.operationalinsights/workspaces",
                          "crossComponentResources": [
                            "{workspace}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "ResourceID",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "19.8551ch"
                                }
                              },
                              {
                                "columnMatch": "OSType",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "21.4286ch"
                                }
                              },
                              {
                                "columnMatch": "Domain",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "15ch"
                                }
                              },
                              {
                                "columnMatch": "resourceGroup",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "23ch"
                                }
                              },
                              {
                                "columnMatch": "Status",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "20.7143ch"
                                }
                              },
                              {
                                "columnMatch": "AMAHeartbeat",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "is Empty",
                                      "representation": "4",
                                      "text": "None"
                                    },
                                    {
                                      "sourceColumn": "AMAState",
                                      "operator": "==",
                                      "thresholdValue": "Not Connected",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "16.4266ch"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "VMICollection",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "is Empty",
                                      "representation": "4",
                                      "text": "None"
                                    },
                                    {
                                      "sourceColumn": "VMInsightsState",
                                      "operator": "==",
                                      "thresholdValue": "Not Connected",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "16.9996ch"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "SyslogCollection",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Windows",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "is Empty",
                                      "representation": "4",
                                      "text": "None"
                                    },
                                    {
                                      "sourceColumn": "SyslogState",
                                      "operator": "==",
                                      "thresholdValue": "Not Connected",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "sourceColumn": "SyslogState",
                                      "operator": "==",
                                      "thresholdValue": "n/a",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "14.5ch"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "SecurityEventCollection",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Linux",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "is Empty",
                                      "representation": "4",
                                      "text": "None"
                                    },
                                    {
                                      "sourceColumn": "SecurityEventState",
                                      "operator": "==",
                                      "thresholdValue": "Not Connected",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "18.8557ch"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "ChangeTrackingEventCollection",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "is Empty",
                                      "representation": "4",
                                      "text": "None"
                                    },
                                    {
                                      "sourceColumn": "ChangeTrackingState",
                                      "operator": "==",
                                      "thresholdValue": "Not Connected",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "19.7143ch"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "AMAState",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "VMInsightsState",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "ChangeTrackingState",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "SyslogState",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "SecurityEventState",
                                "formatter": 5
                              },
                              {
                                "columnMatch": "location",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "15.7123ch"
                                }
                              },
                              {
                                "columnMatch": "ResourceType_OS",
                                "formatter": 0,
                                "formatOptions": {
                                  "customColumnWidthSetting": "29ch"
                                }
                              },
                              {
                                "columnMatch": "DeviceInfoSeconds",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "sourceColumn": "ResourceType_OS",
                                      "operator": "contains",
                                      "thresholdValue": "Scale Set",
                                      "representation": "more",
                                      "text": "n/a"
                                    },
                                    {
                                      "operator": "is Empty",
                                      "representation": "4",
                                      "text": "None"
                                    },
                                    {
                                      "sourceColumn": "MDEState",
                                      "operator": "==",
                                      "thresholdValue": "Not Connected",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ],
                                  "customColumnWidthSetting": "14.2837ch"
                                },
                                "numberFormat": {
                                  "unit": 24,
                                  "options": {
                                    "style": "decimal",
                                    "maximumFractionDigits": 0
                                  }
                                }
                              },
                              {
                                "columnMatch": "MDEState",
                                "formatter": 5
                              }
                            ],
                            "filter": true,
                            "sortBy": [
                              {
                                "itemKey": "$gen_link_ResourceID_0",
                                "sortOrder": 1
                              }
                            ],
                            "labelSettings": [
                              {
                                "columnId": "ResourceID",
                                "label": "Resource"
                              },
                              {
                                "columnId": "OSType",
                                "label": "Operating System"
                              },
                              {
                                "columnId": "resourceGroup",
                                "label": "Resource Group"
                              },
                              {
                                "columnId": "Status",
                                "label": "Connection Status"
                              },
                              {
                                "columnId": "AMAHeartbeat",
                                "label": "Heartbeat"
                              },
                              {
                                "columnId": "VMICollection",
                                "label": "VM Insights"
                              },
                              {
                                "columnId": "ChangeTrackingEventCollection",
                                "label": "Change Tracking"
                              },
                              {
                                "columnId": "SecurityEventCollection",
                                "label": "Security Events"
                              },
                              {
                                "columnId": "SyslogCollection",
                                "label": "Syslog"
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "$gen_link_ResourceID_0",
                              "sortOrder": 1
                            }
                          ]
                        },
                        "name": "query - 3"
                      }
                    ]
                  },
                  "name": "DetailsGroup",
                  "styleSettings": {
                    "showBorder": true
                  }
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "MonitoringSelectedTab",
              "comparison": "isEqualTo",
              "value": "DataCollection"
            },
            "name": "DataCollectionGroup"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Monitoring"
      },
      "name": "MonitoringGroup"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Server Inventory",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| summarize Count=count() by ConnectionStatus\r\n    ",
                    "size": 4,
                    "title": "Connection Status",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "visualization": "piechart"
                  },
                  "customWidth": "25",
                  "name": "query - 2 - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| summarize Count=count() by OS\r\n    ",
                    "size": 4,
                    "title": "Operating System",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "visualization": "piechart"
                  },
                  "customWidth": "25",
                  "name": "query - 2 - Copy - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| summarize Count=count() by resourceGroup\r\n    ",
                    "size": 4,
                    "title": "Resource Group",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "visualization": "piechart"
                  },
                  "customWidth": "25",
                  "name": "query - 2 - Copy - Copy - Copy - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n\t//ComputerName = tostring(properties.osProfile.computerName),\r\n    //FQDN = tostring(properties.dnsFqdn),\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    //OSVersion = tostring(properties.osVersion),\r\n    //MSSQLPresent = tostring(properties.detectedProperties.mssqldiscovered), \r\n    //CloudProvider = tostring(properties.detectedProperties.cloudprovider),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| summarize Count=count() by Domain\r\n    ",
                    "size": 4,
                    "title": "Domain",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "visualization": "piechart"
                  },
                  "customWidth": "25",
                  "name": "query - 2 - Copy - Copy - Copy"
                }
              ]
            },
            "name": "ServerInventoryGroup",
            "styleSettings": {
              "showBorder": true
            }
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "//It will join with resources table and patchassessmentresources\r\n((resources //join of virtual machines, you can play with params as you see fit.\r\n| where type =~ \"microsoft.compute/virtualmachines\"\r\n//excluding non-arc servers ///\r\n| where name == \"xxxxxxxxxx\"\r\n//excluding non-arc servers ///\r\n| where properties.storageProfile.osDisk.osType in~ ('Linux','Windows')\r\n| extend conf = iff(properties.storageProfile.osDisk.osType =~ \"windows\", properties.osProfile.windowsConfiguration.patchSettings.patchMode, properties.osProfile.linuxConfiguration.patchSettings.patchMode)\r\n| extend os = tolower(tostring(properties.storageProfile.osDisk.osType))\r\n| extend id=tolower(id)\r\n| extend status=properties.extended.instanceView.powerState.displayStatus\r\n| extend imageRef = strcat(tolower(tostring(properties.storageProfile.imageReference.publisher)), \":\", tolower(tostring(properties.storageProfile.imageReference.offer)), \":\", tolower(tostring(properties.storageProfile.imageReference.sku)))\r\n// For marketplace images, check in the list of allow listed images for guest patching\r\n| extend isMarketplaceUnsupportedImageUsed = (isnotempty(properties.storageProfile.imageReference.publisher) and isnotempty(properties.storageProfile.imageReference.offer) and isnotempty(properties.storageProfile.imageReference.sku)) and\r\n    not(iff(os =~ \"windows\",\r\n        (imageRef in ('microsoftwindowsserver:microsoftserveroperatingsystems-previews:windows-server-vnext-azure-edition-core','microsoftwindowsserver:windowsserver:2008-r2-sp1','microsoftwindowsserver:windowsserver:2012-r2-datacenter','microsoftwindowsserver:windowsserver:2012-r2-datacenter-gensecond','microsoftwindowsserver:windowsserver:2012-r2-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2012-r2-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserver:2016-datacenter','microsoftwindowsserver:windowsserver:2016-datacenter-gensecond','microsoftwindowsserver:windowsserver:2016-datacenter-server-core','microsoftwindowsserver:windowsserver:2016-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2016-datacenter-with-containers','microsoftwindowsserver:windowsserver:2019-datacenter','microsoftwindowsserver:windowsserver:2019-datacenter-core','microsoftwindowsserver:windowsserver:2019-datacenter-gensecond','microsoftwindowsserver:windowsserver:2019-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2019-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserver:2019-datacenter-with-containers','microsoftwindowsserver:windowsserver:2022-datacenter','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-core','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-core-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-hotpatch','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-hotpatch-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-azure-edition-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-core','microsoftwindowsserver:windowsserver:2022-datacenter-core-g2','microsoftwindowsserver:windowsserver:2022-datacenter-g2','microsoftwindowsserver:windowsserver:2022-datacenter-smalldisk','microsoftwindowsserver:windowsserver:2022-datacenter-smalldisk-g2','microsoftwindowsserver:windowsserverhotpatch-previews:windows-server-2022-azure-edition-hotpatch','microsoftwindowsserver:microsoftserveroperatingsystems-previews:windows-server-2025-azure-edition-hotpatch','microsoftazuresiterecovery:process-server:windows-2012-r2-datacenter','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v4','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v5','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v6','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-v7','microsoftdynamicsax:dynamics:pre-req-ax7-onebox-u8','microsoftsqlserver:sql2016sp1-ws2016:standard','microsoftsqlserver:sql2016sp2-ws2016:standard','microsoftsqlserver:sql2017-ws2016:enterprise','microsoftsqlserver:sql2017-ws2016:standard','microsoftsqlserver:sql2019-ws2019:enterprise','microsoftsqlserver:sql2019-ws2019:sqldev','microsoftsqlserver:sql2019-ws2019:standard','microsoftsqlserver:sql2019-ws2019:standard-gen2','center-for-internet-security-inc:cis-windows-server-2016-v1-0-0-l1:cis-ws2016-l1','center-for-internet-security-inc:cis-windows-server-2016-v1-0-0-l2:cis-ws2016-l2','center-for-internet-security-inc:cis-windows-server-2019-v1-0-0-l1:cis-ws2019-l1','center-for-internet-security-inc:cis-windows-server-2019-v1-0-0-l2:cis-ws2019-l2','center-for-internet-security-inc:cis-win-2019-stig:cis-win-2019-stig','center-for-internet-security-inc:cis-windows-server:cis-windows-server2019-stig-gen1','center-for-internet-security-inc:cis-windows-server-2012-r2-v2-2-1-l2:cis-ws2012-r2-l2','cloud-infrastructure-services:servercore-2019:servercore-2019','cloud-infrastructure-services:hpc2019-windows-server-2019:hpc2019-windows-server-2019','cognosys:sql-server-2016-sp2-std-win2016-debug-utilities:sql-server-2016-sp2-std-win2016-debug-utilities','cloud-infrastructure-services:ad-dc-2016:ad-dc-2016','cloud-infrastructure-services:ad-dc-2019:ad-dc-2019','cloud-infrastructure-services:ad-dc-2022:ad-dc-2022','cloud-infrastructure-services:sftp-2016:sftp-2016','cloud-infrastructure-services:rds-farm-2019:rds-farm-2019','cloud-infrastructure-services:hmailserver:hmailserver-email-server-2016','veeam:office365backup:veeamoffice365backup') or imageRef matches regex 'microsoftwindowsserver:windowsserver:.*|microsoftbiztalkserver:biztalk-server:.*|microsoftdynamicsax:dynamics:.*|microsoftpowerbi:.*:.*|microsoftsharepoint:microsoftsharepointserver:.*|microsoftsqlserver:.*:.*|microsoftvisualstudio:visualstudio.*:.*-ws2012r2|microsoftvisualstudio:visualstudio.*:.*-ws2016|microsoftvisualstudio:visualstudio.*:.*-ws2019|microsoftvisualstudio:visualstudio.*:.*-ws2022|microsoftwindowsserver:windows-cvm:.*|microsoftwindowsserver:windowsserverdotnet:.*|microsoftwindowsserver:windowsserver-gen2preview:.*|microsoftwindowsserver:windowsserversemiannual:.*|microsoftwindowsserver:windowsserverupgrade:.*|microsoftwindowsserverhpcpack:windowsserverhpcpack:.*|microsoft-dsvm:dsvm-windows:.*|microsoft-dsvm:dsvm-win-2019:.*|microsoft-dsvm:dsvm-win-2022:.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2016-l.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2019-l.*|center-for-internet-security-inc:cis-windows-server:cis-windows-server2022-l.*|center-for-internet-security-inc:cis-windows-server-2022-l1:.*|center-for-internet-security-inc:cis-windows-server-2022-l2:.*|microsoft-ads:windows-data-science-vm:.*|filemagellc:filemage-gateway-vm-win:filemage-gateway-vm-win-.*|esri:arcgis-enterprise.*:byol.*|esri:pro-byol:pro-byol-.*|veeam:veeam-backup-replication:veeam-backup-replication-v.*|southrivertech1586314123192:tn-ent-payg:tnentpayg.*|belindaczsro1588885355210:belvmsrv01:belvmsrv.*|southrivertech1586314123192:tn-sftp-payg:tnsftppayg.*'),\r\n        not(imageRef in ('redhat:rhel-ha:81_gen2') or imageRef matches regex 'openlogic:centos:8.*|openlogic:centos-hpc:.*|microsoftsqlserver:sql2019-sles.*:.*|microsoftsqlserver:sql2019-rhel7:.*|microsoftsqlserver:sql2017-rhel7:.*|microsoft-ads:.*:.*|suse:sles-sap-15-.*-byos:gen.*') and\r\n            (imageRef in ('canonical:ubuntuserver:16.04-lts','canonical:ubuntuserver:16.04.0-lts','canonical:ubuntuserver:18.04-lts','canonical:ubuntuserver:18_04-lts-gen2','canonical:0001-com-ubuntu-pro-bionic:pro-18_04-lts','canonical:0001-com-ubuntu-pro-focal:pro-20_04-lts','canonical:0001-com-ubuntu-pro-focal:pro-20_04-lts-gen2','canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts-gen2','canonical:0001-com-ubuntu-server-focal:20_04-lts','canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2','canonical:0001-com-ubuntu-server-jammy:22_04-lts','canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2','microsoftcblmariner:cbl-mariner:cbl-mariner-1','microsoftcblmariner:cbl-mariner:1-gen2','microsoftcblmariner:cbl-mariner:cbl-mariner-2','microsoftcblmariner:cbl-mariner:cbl-mariner-2-gen2','microsoft-aks:aks:aks-engine-ubuntu-1804-202112','microsoft-dsvm:aml-workstation:ubuntu-20','microsoft-dsvm:aml-workstation:ubuntu-20-gen2','openlogic:centos:7.2','openlogic:centos:7.3','openlogic:centos:7.4','openlogic:centos:7.5','openlogic:centos:7.6','openlogic:centos:7.7','openlogic:centos:7_8','openlogic:centos:7_9','openlogic:centos:7_9-gen2','openlogic:centos:8.0','openlogic:centos:8_1','openlogic:centos:8_2','openlogic:centos:8_3','openlogic:centos:8_4','openlogic:centos:8_5','openlogic:centos-lvm:7-lvm','openlogic:centos-lvm:8-lvm','redhat:rhel:7.2','redhat:rhel:7.3','redhat:rhel:7.4','redhat:rhel:7.5','redhat:rhel:7.6','redhat:rhel:7.7','redhat:rhel:7.8','redhat:rhel:7_9','redhat:rhel:7-lvm','redhat:rhel:7-raw','redhat:rhel:8','redhat:rhel:8.1','redhat:rhel:81gen2','redhat:rhel:8.2','redhat:rhel:82gen2','redhat:rhel:8_3','redhat:rhel:83-gen2','redhat:rhel:8_4','redhat:rhel:84-gen2','redhat:rhel:8_5','redhat:rhel:85-gen2','redhat:rhel:8_6','redhat:rhel:86-gen2','redhat:rhel:8_7','redhat:rhel:8_8','redhat:rhel:8-lvm','redhat:rhel:8-lvm-gen2','redhat:rhel-raw:8-raw','redhat:rhel-raw:8-raw-gen2','redhat:rhel:9_0','redhat:rhel:9_1','redhat:rhel:9-lvm','redhat:rhel:9-lvm-gen2','suse:sles-12-sp5:gen1','suse:sles-12-sp5:gen2','suse:sles-15-sp2:gen1','suse:sles-15-sp2:gen2','almalinux:almalinux-x86_64:8_7-gen2','almalinux:almalinux-hpc:8_6-hpc','almalinux:almalinux-hpc:8_6-hpc-gen2','aviatrix-systems:aviatrix-bundle-payg:aviatrix-enterprise-bundle-byol','aviatrix-systems:aviatrix-copilot:avx-cplt-byol-01','aviatrix-systems:aviatrix-copilot:avx-cplt-byol-02','aviatrix-systems:aviatrix-companion-gateway-v9:aviatrix-companion-gateway-v9','aviatrix-systems:aviatrix-companion-gateway-v10:aviatrix-companion-gateway-v10','aviatrix-systems:aviatrix-companion-gateway-v10:aviatrix-companion-gateway-v10u','aviatrix-systems:aviatrix-companion-gateway-v12:aviatrix-companion-gateway-v12','aviatrix-systems:aviatrix-companion-gateway-v13:aviatrix-companion-gateway-v13','aviatrix-systems:aviatrix-companion-gateway-v13:aviatrix-companion-gateway-v13u','aviatrix-systems:aviatrix-companion-gateway-v14:aviatrix-companion-gateway-v14','aviatrix-systems:aviatrix-companion-gateway-v14:aviatrix-companion-gateway-v14u','aviatrix-systems:aviatrix-companion-gateway-v16:aviatrix-companion-gateway-v16','canonical:0001-com-ubuntu-pro-jammy:pro-22_04-lts','center-for-internet-security-inc:cis-rhel:cis-redhat7-l1-gen1','center-for-internet-security-inc:cis-rhel-7-l2:cis-rhel7-l2','center-for-internet-security-inc:cis-rhel-8-stig:cis-rhel-8-stig','center-for-internet-security-inc:cis-oracle-linux-8-l1:cis-oracle8-l1','center-for-internet-security-inc:cis-ubuntu:cis-ubuntu1804-l1','center-for-internet-security-inc:cis-ubuntu:cis-ubuntulinux2004-l1-gen1','center-for-internet-security-inc:cis-ubuntu-linux-1804-l1:cis-ubuntu1804-l1','center-for-internet-security-inc:cis-ubuntu-linux-2004-l1:cis-ubuntu2004-l1','center-for-internet-security-inc:cis-ubuntu-linux-2204-l1:cis-ubuntu-linux-2204-l1','center-for-internet-security-inc:cis-ubuntu-linux-2204-l1:cis-ubuntu-linux-2204-l1-gen2','cloud-infrastructure-services:dns-ubuntu-2004:dns-ubuntu-2004','cloud-infrastructure-services:squid-ubuntu-2004:squid-ubuntu-2004','cloud-infrastructure-services:load-balancer-nginx:load-balancer-nginx','cloudera:cloudera-centos-os:7_5','cncf-upstream:capi:ubuntu-1804-gen1','cncf-upstream:capi:ubuntu-2004-gen1','cncf-upstream:capi:ubuntu-2204-gen1','credativ:debian:9','credativ:debian:9-backports','debian:debian-10:10','debian:debian-10:10-gen2','debian:debian-10:10-backports','debian:debian-10:10-backports-gen2','debian:debian-10-daily:10','debian:debian-10-daily:10-gen2','debian:debian-10-daily:10-backports','debian:debian-10-daily:10-backports-gen2','debian:debian-11:11','debian:debian-11:11-gen2','debian:debian-11:11-backports','debian:debian-11:11-backports-gen2','debian:debian-11-daily:11','debian:debian-11-daily:11-gen2','debian:debian-11-daily:11-backports','debian:debian-11-daily:11-backports-gen2','erockyenterprisesoftwarefoundationinc1653071250513:rockylinux:free','erockyenterprisesoftwarefoundationinc1653071250513:rockylinux-9:rockylinux-9','github:github-enterprise:github-enterprise','matillion:matillion:matillion-etl-for-snowflake','microsoft-dsvm:aml-workstation:ubuntu','microsoft-dsvm:ubuntu-hpc:1804','microsoft-dsvm:ubuntu-hpc:2004-preview-ndv5','microsoft-dsvm:ubuntu-hpc:2004','microsoft-dsvm:ubuntu-hpc:2204-preview-ndv5','microsoft-dsvm:ubuntu-hpc:2204','microsoft-dsvm:ubuntu-1804:1804-gen2','microsoft-dsvm:ubuntu-2004:2004','microsoft-dsvm:ubuntu-2004:2004-gen2','netapp:netapp-oncommand-cloud-manager:occm-byol','nginxinc:nginx-plus-ent-v1:nginx-plus-ent-centos7','ntegralinc1586961136942:ntg_oracle_8_7:ntg_oracle_8_7','ntegralinc1586961136942:ntg_ubuntu_20_04_lts:ntg_ubuntu_20_04_lts','openlogic:centos-hpc:7.1','openlogic:centos-hpc:7.3','oracle:oracle-linux:8','oracle:oracle-linux:8-ci','oracle:oracle-linux:81','oracle:oracle-linux:81-ci','oracle:oracle-linux:81-gen2','oracle:oracle-linux:ol82','oracle:oracle-linux:ol8_2-gen2','oracle:oracle-linux:ol82-gen2','oracle:oracle-linux:ol83-lvm','oracle:oracle-linux:ol83-lvm-gen2','oracle:oracle-linux:ol84-lvm','oracle:oracle-linux:ol84-lvm-gen2','procomputers:almalinux-8-7:almalinux-8-7','procomputers:rhel-8-2:rhel-8-2','procomputers:rhel-8-8-gen2:rhel-8-8-gen2','procomputers:rhel-8-9-gen2:rhel-8-9-gen2','redhat:rhel:89-gen2','redhat:rhel-byos:rhel-raw76','redhat:rhel-byos:rhel-lvm88','redhat:rhel-byos:rhel-lvm88-gen2','redhat:rhel-byos:rhel-lvm92','redhat:rhel-byos:rhel-lvm-92-gen2','redhat:rhel-ha:9_2','redhat:rhel-ha:9_2-gen2','redhat:rhel-sap-apps:9_0','redhat:rhel-sap-apps:90sapapps-gen2','redhat:rhel-sap-apps:9_2','redhat:rhel-sap-apps:92sapapps-gen2','redhat:rhel-sap-ha:9_2','redhat:rhel-sap-ha:92sapha-gen2','openlogic:centos-ci:7-ci','openlogic:centos-lvm:7-lvm-gen2','oracle:oracle-database:oracle_db_21','oracle:oracle-database-19-3:oracle-database-19-0904','redhat:rhel-sap-ha:90sapha-gen2','suse:sles:12-sp4-gen2','suse:sles-15-sp2-basic:gen2','suse:sles-15-sp2-hpc:gen2','suse:sles-15-sp4-sapcal:gen1','suse:sles-byos:12-sp4','suse:sles-byos:12-sp4-gen2','suse:sles-sap:12-sp4','suse:sles-sap:12-sp4-gen2','suse:sles-sap-byos:12-sp4','suse:sles-sap-byos:12-sp4-gen2','suse:sles-sap-byos:gen2-12-sp4','suse:sles-sapcal:12-sp3','suse:sles-standard:12-sp4-gen2','suse:sles-sap-15-sp2-byos:gen2','talend:talend_re_image:tlnd_re','tenable:tenablecorewas:tenablecoreol8wasbyol','thorntechnologiesllc:sftpgateway:sftpgateway','zscaler:zscaler-private-access:zpa-con-azure') or imageRef matches regex 'almalinux:almalinux:8-gen.*|almalinux:almalinux:9-gen.*|almalinux:almalinux-x86_64:8-gen.*|almalinux:almalinux-x86_64:9-gen.*|canonical:.*:.*|center-for-internet-security-inc:cis-rhel:cis-redhat8-l.*-gen1|center-for-internet-security-inc:cis-rhel:cis-redhat9-l1-gen.*|center-for-internet-security-inc:cis-rhel-8-l.*:cis-rhel8-l.*|center-for-internet-security-inc:cis-rhel9-l1:cis-rhel9-l1.*|center-for-internet-security-inc:cis-ubuntu:cis-ubuntulinux2204-l1-gen.*|microsoftsqlserver:.*:.*|openlogic:centos:7.*|oracle:oracle-database-.*:18..*|oracle:oracle-linux:7.*|openlogic:centos:8.*|oracle:oracle-linux:ol7.*|oracle:oracle-linux:ol8.*|oracle:oracle-linux:ol9.*|redhat:rhel:7.*|redhat:rhel:8.*|redhat:rhel:9.*|redhat:rhel-byos:rhel-lvm7.*|redhat:rhel-byos:rhel-lvm8.*|redhat:rhel-ha:8.*|redhat:rhel-raw:7.*|redhat:rhel-raw:8.*|redhat:rhel-raw:9.*|redhat:rhel-sap:7.*|redhat:rhel-sap-apps:7.*|redhat:rhel-sap-apps:8.*|redhat:rhel-sap-.*:9_0|redhat:rhel-sap-ha:7.*|redhat:rhel-sap-ha:8.*|suse:opensuse-leap-15-.*:gen.*|suse:sles-12-sp5-.*:gen.*|oracle:oracle-linux:ol9-lvm.*|suse:sles-sap-12-sp5.*:gen.*|suse:sles-sap-15-.*:gen.*|suse:sle-hpc-15-sp4:gen.*|suse:sles-15-sp1-sapcal:gen.*|suse:sles-15-sp3-sapcal:gen.*|suse:sles-15-sp4:gen.*|suse:sles-15-sp4-basic:gen.*|suse:sle-hpc-15-sp4-byos:gen.*|suse:sle-hpc-15-sp5-byos:gen.*|suse:sle-hpc-15-sp5:gen.*|suse:sles-15-sp4-byos:gen.*|suse:sles-15-sp4-chost-byos:gen.*|suse:sles-15-sp4-hardened-byos:gen.*|suse:sles-15-sp5-basic:gen.*|suse:sles-15-sp5-byos:gen.*|suse:sles-15-sp5-chost-byos:gen.*|suse:sles-15-sp5-hardened-byos:gen.*|suse:sles-15-sp5-sapcal:gen.*|suse:sles-15-sp5:gen.*|suse:sles-sap-15-sp4-byos:gen.*|suse:sles-sap-15-sp4-hardened-byos:gen.*|suse:sles-sap-15-sp5-byos:gen.*|suse:sles-sap-15-sp5-hardened-byos:gen.*')))\r\n| project id, name, os, type, conf, status, resourceGroup, resourceProperties=properties, isMarketplaceUnsupportedImageUsed)\r\n| union\r\n(resources //union with arc servers, you can play with params as you see fit.\r\n| where type =~ \"microsoft.hybridcompute/machines\"\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n    OS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| extend id=tolower(id)\r\n| extend os=tolower(coalesce(tostring(properties.osName), tostring(properties.osType)))\r\n| where os in~ ('Linux', 'Windows')\r\n| extend status=properties.status\r\n| extend isMarketplaceUnsupportedImageUsed = false\r\n| project id, name, os, type, status,resourceGroup, resourceProperties=properties, isMarketplaceUnsupportedImageUsed,Domain,ConnectionStatus,OSName,Manufacturer,Model))\r\n| join kind=leftouter(\r\n    resources\r\n    | where type in~ (\"Microsoft.SqlVirtualMachine/sqlVirtualMachines\", \"microsoft.azurearcdata/sqlserverinstances\")\r\n    | project resourceId = iff(type =~ \"Microsoft.SqlVirtualMachine/sqlVirtualMachines\", tolower(properties.virtualMachineResourceId), tolower(properties.containerResourceId)), sqlType = type\r\n    | summarize by resourceId, sqlType\r\n) on $left.id == $right.resourceId\r\n| extend type = iff(isnotempty(sqlType), sqlType, type)\r\n| project-away sqlType, resourceId\r\n| where type in~ (\"microsoft.compute/virtualmachines\", \"microsoft.hybridcompute/machines\", \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", \"microsoft.azurearcdata/sqlserverinstances\") // Filtering by resource type\r\n| join kind=leftouter //finally, making a left outer join to fetch updates details from patchassessment\r\n((patchassessmentresources\r\n| where type in~ (\"microsoft.compute/virtualmachines/patchassessmentresults\", \"microsoft.hybridcompute/machines/patchassessmentresults\")\r\n| where properties.status =~ \"Succeeded\" or properties.status =~ \"Inprogress\" or (isnotnull(properties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState) and (properties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState =~ \"Unsupported\"))\r\n| parse id with resourceId \"/patchAssessmentResults\" *\r\n| extend resourceId=tolower(resourceId)\r\n| project resourceId, assessProperties=properties))\r\non $left.id == $right.resourceId //join on resources id & patchassessment id that is parsed.\r\n| extend isUnsupported = isMarketplaceUnsupportedImageUsed or (isnotnull(assessProperties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState) and (assessProperties.configurationStatus.vmGuestPatchReadiness.detectedVMGuestPatchSupportState =~ \"Unsupported\"))\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n////\r\n//////////// EXCLUDE LIST ////////////\r\n//////////// EXCLUDE LIST ////////////\r\n| summarize\r\ntotal = countif(1 == 1),\r\nnodata = countif((isnull(assessProperties) == true and not(isUnsupported)) or assessProperties.status =~ \"inprogress\"), // not(isUnsupported) condition is for removing unsupported machines.\r\npendingReboot = countif(isnotnull(assessProperties) and assessProperties.rebootPending == \"true\" and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\n//pendingUpdates - when any classification has > 0 updates\r\npendingUpdatesWindows = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Windows\" and (assessProperties.availablePatchCountByClassification.critical>0 or assessProperties.availablePatchCountByClassification.security>0 or assessProperties.availablePatchCountByClassification.updateRollup>0 or assessProperties.availablePatchCountByClassification.featurePack>0 or assessProperties.availablePatchCountByClassification.servicePack>0 or assessProperties.availablePatchCountByClassification.definition>0 or assessProperties.availablePatchCountByClassification.tools>0 or assessProperties.availablePatchCountByClassification.updates>0) and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\npendingUpdatesLinux = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Linux\" and (assessProperties.availablePatchCountByClassification.security>0 or assessProperties.availablePatchCountByClassification.other>0) and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\n//noPendingUpdates - when all classifications has 0 updates\r\nnoPendingUpdatesWindows = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Windows\" and (assessProperties.availablePatchCountByClassification.critical==0 and assessProperties.availablePatchCountByClassification.security==0 and assessProperties.availablePatchCountByClassification.updateRollup==0 and assessProperties.availablePatchCountByClassification.featurePack==0 and assessProperties.availablePatchCountByClassification.servicePack==0 and assessProperties.availablePatchCountByClassification.definition==0 and assessProperties.availablePatchCountByClassification.tools==0 and assessProperties.availablePatchCountByClassification.updates==0) and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\nnoPendingUpdatesLinux = countif(isnotnull(assessProperties) and assessProperties.osType =~ \"Linux\" and (assessProperties.availablePatchCountByClassification.security==0 and assessProperties.availablePatchCountByClassification.other==0) and not(isUnsupported or assessProperties.status =~ \"inprogress\")),\r\nunsupported = countif(isUnsupported and not(isnotnull(assessProperties) and assessProperties.status =~ \"inprogress\"))\r\n| project total, nodata, pendingReboot,pendingUpdates = pendingUpdatesWindows+pendingUpdatesLinux, noPendingUpdates = noPendingUpdatesWindows+noPendingUpdatesLinux, unsupported\r\n| project machinePack = pack(\"No pending updates\", noPendingUpdates, \"Pending updates\", pendingUpdates, \"Pending reboot\", pendingReboot,  \"No updates data\", nodata, \"Unsupported\",unsupported, \"Total machines\", total)\r\n| mv-expand machinePack\r\n| extend machine = tostring(bag_keys(machinePack)[0])\r\n| extend count_ = tolong(machinePack[machine])\r\n| project machine, count_ \r\n| where machine !=\"Total machines\"\r\n| where machine != \"Unsupported\"",
                    "size": 1,
                    "title": "Update Status",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "visualization": "piechart"
                  },
                  "name": "query - 0 - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "policyresources\r\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\r\n| extend complianceState = tostring(properties.complianceState)\r\n| extend\r\n\tResourceId = tolower(tostring(properties.resourceId)),\r\n\tpolicyAssignmentId = tostring(properties.policyAssignmentId),\r\n\tpolicyAssignmentScope = tostring(properties.policyAssignmentScope),\r\n\tpolicyAssignmentName = tostring(properties.policyAssignmentName),\r\n\tpolicyDefinitionId = tostring(properties.policyDefinitionId),\r\n\tpolicyDefinitionReferenceId = tostring(properties.policyDefinitionReferenceId),\r\n\tstateWeight = iff(complianceState == 'NonCompliant', int(300), iff(complianceState == 'Compliant', int(200), iff(complianceState == 'Conflict', int(100), iff(complianceState == 'Exempt', int(50), int(0)))))\r\n| join kind=inner\r\n(\r\nresources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project ResourceId,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,OS,Manufacturer,Model,AgentVersion\r\n) on ResourceId\r\n| summarize max(stateWeight) by ResourceId, policyAssignmentId, policyAssignmentScope, policyAssignmentName\r\n| summarize counts = count() by policyAssignmentId, policyAssignmentScope, max_stateWeight, policyAssignmentName\r\n| summarize overallStateWeight = max(max_stateWeight),\r\nnonCompliantCount = sumif(counts, max_stateWeight == 300),\r\ncompliantCount = sumif(counts, max_stateWeight == 200),\r\nconflictCount = sumif(counts, max_stateWeight == 100),\r\nexemptCount = sumif(counts, max_stateWeight == 50) by policyAssignmentId, policyAssignmentScope, policyAssignmentName\r\n| extend totalResources = todouble(nonCompliantCount + compliantCount + conflictCount + exemptCount)\r\n| extend compliancePercentage = iff(totalResources == 0, todouble(100), 100 * todouble(compliantCount + exemptCount) / totalResources)\r\n| project \r\ncomplianceState = iff(overallStateWeight == 300, 'noncompliant', iff(overallStateWeight == 200, 'compliant', iff(overallStateWeight == 100, 'conflict', iff(overallStateWeight == 50, 'exempt', 'notstarted')))),\r\npolicyAssignmentName, scope = policyAssignmentScope,\r\ncompliancePercentage,\r\ncompliantCount,\r\nnonCompliantCount,\r\nconflictCount,\r\nexemptCount\r\n| join kind=leftouter (\r\npolicyresources\r\n| where type == \"microsoft.authorization/policyassignments\"\r\n| extend name=tostring(name)\r\n| extend DisplayName = tostring(properties.displayName)\r\n| project name,DisplayName\r\n) on $left.policyAssignmentName == $right.name\r\n//| project complianceState,DisplayName,scope,compliancePercentage,compliantCount,nonCompliantCount,conflictCount,exemptCount\r\n| project complianceState,DisplayName,scope,compliancePercentage,compliantCount,nonCompliantCount,conflictCount,exemptCount\r\n\r\n",
                    "size": 1,
                    "title": "Policy Compliance",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "complianceState",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "compliant",
                                "representation": "success",
                                "text": "[\"DisplayName\"]"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "noncompliant",
                                "representation": "4",
                                "text": "[\"DisplayName\"]"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "unknown",
                                "text": "[\"DisplayName\"]"
                              }
                            ],
                            "customColumnWidthSetting": "47.4286ch"
                          }
                        },
                        {
                          "columnMatch": "DisplayName",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "compliancePercentage",
                          "formatter": 4,
                          "formatOptions": {
                            "min": 0,
                            "max": 100,
                            "palette": "redGreen",
                            "customColumnWidthSetting": "143px"
                          },
                          "numberFormat": {
                            "unit": 1,
                            "options": {
                              "style": "decimal",
                              "maximumFractionDigits": 0
                            }
                          }
                        },
                        {
                          "columnMatch": "compliantCount",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "nonCompliantCount",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "conflictCount",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "exemptCount",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "policyAssignmentName",
                          "formatter": 5
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "complianceState",
                          "label": "Policy Assignment"
                        },
                        {
                          "columnId": "DisplayName",
                          "label": "DisplayName"
                        },
                        {
                          "columnId": "scope",
                          "label": "Scope"
                        },
                        {
                          "columnId": "compliancePercentage",
                          "label": "Compliance"
                        },
                        {
                          "columnId": "compliantCount",
                          "label": "Compliant"
                        },
                        {
                          "columnId": "nonCompliantCount",
                          "label": "Non-Compliant"
                        },
                        {
                          "columnId": "conflictCount",
                          "label": "Conflict"
                        },
                        {
                          "columnId": "exemptCount",
                          "label": "Exempt"
                        }
                      ]
                    }
                  },
                  "name": "query - 4 - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                }
              ]
            },
            "customWidth": "50",
            "name": "Group2"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project joinid=toupper(id)//,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,Manufacturer,Model,AgentVersion\r\n| join kind=leftouter\r\n(\r\nresources\r\n| where type == \"microsoft.hybridcompute/machines/extensions\"\r\n| extend joinid = toupper(substring(id, 0, indexof(id, '/extensions')))\r\n| project joinid,ExtensionName = name, State = tostring(properties.provisioningState), MachineId = tolower(split(id, \"/extensions/\")[0]), Dummy = 1\r\n) on joinid\r\n| summarize MachineCount = count() by ExtensionName, State, Dummy\r\n| summarize \r\n    Installed = sumif(MachineCount, State in (\"Succeeded\", \"Updating\")),\r\n    Failed = sumif(MachineCount, State == \"Failed\"),\r\n    Dummy=1\r\n    by ExtensionName\r\n    | join kind=leftouter (\r\n    resources\r\n    | where type == \"microsoft.hybridcompute/machines\"\r\n    | summarize TotalMachines = count()\r\n    | project TotalMachines, Dummy = 1\r\n) on Dummy\r\n| project \r\n    ExtensionName,\r\n    Installed = iff(isnull(Installed), 0, Installed),\r\n    Failed = iff(isnull(Failed), 0, Failed),\r\n    TotalMachines = iff(isnull(TotalMachines), 0, TotalMachines),\r\n    TotalNotInstalled = TotalMachines-Installed,\r\n    TotalNotFailed = TotalMachines-Failed\r\n| order by ExtensionName asc",
                    "size": 1,
                    "title": "Server Extensions",
                    "exportFieldName": "ExtensionName",
                    "exportParameterName": "ExtensionName",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Installed",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"Installed\"]/[\"TotalMachines\"]",
                              "columnSettings": [
                                {
                                  "columnName": "Installed",
                                  "color": "green"
                                },
                                {
                                  "columnName": "TotalNotInstalled",
                                  "color": "gray"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "Failed",
                          "formatter": 22,
                          "formatOptions": {
                            "compositeBarSettings": {
                              "labelText": "[\"Failed\"]/[\"TotalMachines\"]",
                              "columnSettings": [
                                {
                                  "columnName": "Failed",
                                  "color": "redBright"
                                },
                                {
                                  "columnName": "TotalNotFailed",
                                  "color": "gray"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "columnMatch": "TotalMachines",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalNotInstalled",
                          "formatter": 5
                        },
                        {
                          "columnMatch": "TotalNotFailed",
                          "formatter": 5
                        }
                      ],
                      "sortBy": [
                        {
                          "itemKey": "ExtensionName",
                          "sortOrder": 1
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "ExtensionName",
                          "label": "Extension"
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "ExtensionName",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "name": "query - 11 - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "resources\r\n| where type == 'microsoft.hybridcompute/machines'\r\n| extend\r\n    Domain = tostring(properties.domainName),\r\n\tOS = tostring(properties.osName),\r\n    OSName = tostring(properties.osSku),\r\n    Manufacturer = tostring(properties.detectedProperties.manufacturer),\r\n    Model = tostring(properties.detectedProperties.model),\r\n    AgentVersion = tostring(properties.agentVersion),\r\n    ConnectionStatus = tostring(properties.status),\r\n    LastStatusChange = todatetime(properties.lastStatusChange),\r\n    ResourceId = tolower(id)\r\n| where resourceGroup in ({ResourceGroup}) and Domain in ({Domain}) and OS in({OperatingSystem}) and ConnectionStatus in ({ConnectionStatus})\r\n| project ResourceId,Domain,resourceGroup,ConnectionStatus,LastStatusChange,OSName,OS,Manufacturer,Model,AgentVersion\r\n| join\r\n(\r\nAdvisorResources\r\n| where type == 'microsoft.advisor/recommendations'\r\n| where tolower(properties.resourceMetadata.resourceId) contains 'microsoft.hybridcompute/machines'\r\n| project\r\n\t\tResourceId = tolower(properties.resourceMetadata.resourceId),\r\n        Recommendation = tostring(properties.shortDescription.problem),\r\n\t\tCategory = tostring(properties.category),\r\n\t\tImpact = tostring(properties.impact)\r\n) on ResourceId\r\n| project Recommendation, Impact, Category//,ResourceId,Domain,resourceGroup,ConnectionStatus,OS\r\n| summarize Count=count() by Recommendation, Impact, Category\r\n| project Recommendation, Count, Category, Impact",
                    "size": 1,
                    "title": "Azure Advisor Recommendations",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "Recommendation",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "sourceColumn": "Impact",
                                "operator": "==",
                                "thresholdValue": "High",
                                "representation": "4",
                                "text": "{0}{1}"
                              },
                              {
                                "sourceColumn": "Impact",
                                "operator": "==",
                                "thresholdValue": "Medium",
                                "representation": "2",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "info",
                                "text": "{0}{1}"
                              }
                            ],
                            "customColumnWidthSetting": "71.8571ch"
                          }
                        },
                        {
                          "columnMatch": "ResourceId",
                          "formatter": 0,
                          "formatOptions": {
                            "customColumnWidthSetting": "20.4286ch"
                          }
                        }
                      ],
                      "labelSettings": [
                        {
                          "columnId": "Count",
                          "label": "Server Count"
                        }
                      ]
                    }
                  },
                  "name": "query - 0 - Copy",
                  "styleSettings": {
                    "showBorder": true
                  }
                }
              ]
            },
            "customWidth": "50",
            "name": "Group3"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "selectedTab",
        "comparison": "isEqualTo",
        "value": "Overview"
      },
      "name": "OverviewGroup"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}